<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl" kind="class" language="C++" prot="public">
    <compoundname>faiss::gpu::StandardGpuResourcesImpl</compoundname>
    <basecompoundref refid="classfaiss_1_1gpu_1_1GpuResources" prot="public" virt="non-virtual">faiss::gpu::GpuResources</basecompoundref>
    <includes refid="StandardGpuResources_8h" local="no">StandardGpuResources.h</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1aaf1d435773c0b0a0571fa397c9bfaa6a" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; int, std::unordered_map&lt; void *, <ref refid="structfaiss_1_1gpu_1_1AllocRequest" kindref="compound">AllocRequest</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;int, std::unordered_map&lt;void*, AllocRequest&gt; &gt; faiss::gpu::StandardGpuResourcesImpl::allocs_</definition>
        <argsstring></argsstring>
        <name>allocs_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::allocs_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set of currently outstanding memory allocations per device device -&gt; (alloc request, allocated ptr) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="137" column="24" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ae246ade2809d7dc770dcc52183b8b498" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; int, std::unique_ptr&lt; <ref refid="classfaiss_1_1gpu_1_1StackDeviceMemory" kindref="compound">StackDeviceMemory</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;int, std::unique_ptr&lt;StackDeviceMemory&gt; &gt; faiss::gpu::StandardGpuResourcesImpl::tempMemory_</definition>
        <argsstring></argsstring>
        <name>tempMemory_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::tempMemory_</qualifiedname>
        <briefdescription>
<para>Temporary memory provider, per each device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="140" column="24" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a20022e4935d985f8e274e5cd1bc37187" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; int, cudaStream_t &gt;</type>
        <definition>std::unordered_map&lt;int, cudaStream_t&gt; faiss::gpu::StandardGpuResourcesImpl::defaultStreams_</definition>
        <argsstring></argsstring>
        <name>defaultStreams_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::defaultStreams_</qualifiedname>
        <briefdescription>
<para>Our default stream that work is ordered on, one per each device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="143" column="24" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ad7a1e48b4128742c29a97f87ccecdd11" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; int, cudaStream_t &gt;</type>
        <definition>std::unordered_map&lt;int, cudaStream_t&gt; faiss::gpu::StandardGpuResourcesImpl::userDefaultStreams_</definition>
        <argsstring></argsstring>
        <name>userDefaultStreams_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::userDefaultStreams_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This contains particular streams as set by the user for ordering, if any </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="147" column="24" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a6b511d4f63fe99e81624a2a5b13847b2" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; int, std::vector&lt; cudaStream_t &gt; &gt;</type>
        <definition>std::unordered_map&lt;int, std::vector&lt;cudaStream_t&gt; &gt; faiss::gpu::StandardGpuResourcesImpl::alternateStreams_</definition>
        <argsstring></argsstring>
        <name>alternateStreams_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::alternateStreams_</qualifiedname>
        <briefdescription>
<para>Other streams we can use, per each device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="150" column="24" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a8ca38d5ac22483ae58a0fe5555998846" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; int, cudaStream_t &gt;</type>
        <definition>std::unordered_map&lt;int, cudaStream_t&gt; faiss::gpu::StandardGpuResourcesImpl::asyncCopyStreams_</definition>
        <argsstring></argsstring>
        <name>asyncCopyStreams_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::asyncCopyStreams_</qualifiedname>
        <briefdescription>
<para>Async copy stream to use for GPU &lt;-&gt; CPU pinned memory copies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="153" column="24" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1af1c41ca22c2e5b2c7451759223f9f3db" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; int, cublasHandle_t &gt;</type>
        <definition>std::unordered_map&lt;int, cublasHandle_t&gt; faiss::gpu::StandardGpuResourcesImpl::blasHandles_</definition>
        <argsstring></argsstring>
        <name>blasHandles_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::blasHandles_</qualifiedname>
        <briefdescription>
<para>cuBLAS handle for each device </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="156" column="24" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a54c32dec0e85b9316426c89085e03b3c" prot="protected" static="no" mutable="no">
        <type>void *</type>
        <definition>void* faiss::gpu::StandardGpuResourcesImpl::pinnedMemAlloc_</definition>
        <argsstring></argsstring>
        <name>pinnedMemAlloc_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::pinnedMemAlloc_</qualifiedname>
        <briefdescription>
<para>Pinned memory allocation for use with this GPU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="180" column="10" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1aed791b318265666dd2b6fde3863f7d18" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::gpu::StandardGpuResourcesImpl::pinnedMemAllocSize_</definition>
        <argsstring></argsstring>
        <name>pinnedMemAllocSize_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::pinnedMemAllocSize_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="181" column="12" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a62e7ab153d60395b6e4906f223a60116" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::gpu::StandardGpuResourcesImpl::tempMemSize_</definition>
        <argsstring></argsstring>
        <name>tempMemSize_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::tempMemSize_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Another option is to use a specified amount of memory on all devices </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="185" column="12" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a68fb215506fb57a4adca5b289808c79f" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::gpu::StandardGpuResourcesImpl::pinnedMemSize_</definition>
        <argsstring></argsstring>
        <name>pinnedMemSize_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::pinnedMemSize_</qualifiedname>
        <briefdescription>
<para>Amount of pinned memory we should allocate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="188" column="12" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ad157e95342116754b0be81a8e5775343" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::gpu::StandardGpuResourcesImpl::allocLogging_</definition>
        <argsstring></argsstring>
        <name>allocLogging_</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::allocLogging_</qualifiedname>
        <briefdescription>
<para>Whether or not we log every GPU memory allocation and deallocation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="191" column="10" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="191" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a416835fae3db3685e40f42c8260f8745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::gpu::StandardGpuResourcesImpl::StandardGpuResourcesImpl</definition>
        <argsstring>()</argsstring>
        <name>StandardGpuResourcesImpl</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::StandardGpuResourcesImpl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="47" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a6c05d4e676be74d65d44ccb23eb63f63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::gpu::StandardGpuResourcesImpl::~StandardGpuResourcesImpl</definition>
        <argsstring>() override</argsstring>
        <name>~StandardGpuResourcesImpl</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::~StandardGpuResourcesImpl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="49" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ad2267943823c25e95b28733bf1177935" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::StandardGpuResourcesImpl::supportsBFloat16</definition>
        <argsstring>(int device) override</argsstring>
        <name>supportsBFloat16</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::supportsBFloat16</qualifiedname>
        <reimplements refid="classfaiss_1_1gpu_1_1GpuResources_1ab4b064a700f9d3d6ecf486be6e23c55c">supportsBFloat16</reimplements>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Does the given GPU support bfloat16? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="52" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a37459ad7862e50792e6498289c7f81b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::StandardGpuResourcesImpl::noTempMemory</definition>
        <argsstring>()</argsstring>
        <name>noTempMemory</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::noTempMemory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable allocation of temporary memory; all temporary memory requests will call cudaMalloc / cudaFree at the point of use </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="56" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a95ec5cc373c8aeefcacd55ee0be0dff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::StandardGpuResourcesImpl::setTempMemory</definition>
        <argsstring>(size_t size)</argsstring>
        <name>setTempMemory</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::setTempMemory</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify that we wish to use a certain fixed size of memory on all devices as temporary memory. This is the upper bound for the GPU memory that we will reserve. We will never go above 1.5 GiB on any GPU; smaller GPUs (with &lt;= 4 GiB or &lt;= 8 GiB) will use less memory than that. To avoid any temporary memory allocation, pass 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="63" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a63bd261de7e331760dea2e59ac26c036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::StandardGpuResourcesImpl::setPinnedMemory</definition>
        <argsstring>(size_t size)</argsstring>
        <name>setPinnedMemory</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::setPinnedMemory</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set amount of pinned memory to allocate, for async GPU &lt;-&gt; CPU transfers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="67" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1aea675757238dda776033cd8607c6daef" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::gpu::StandardGpuResourcesImpl::setDefaultStream</definition>
        <argsstring>(int device, cudaStream_t stream) override</argsstring>
        <name>setDefaultStream</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::setDefaultStream</qualifiedname>
        <reimplements refid="classfaiss_1_1gpu_1_1GpuResources_1ac7a6bad94585904e17907844736165ec">setDefaultStream</reimplements>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called to change the stream for work ordering. We do not own <computeroutput>stream</computeroutput>; i.e., it will not be destroyed when the <ref refid="classfaiss_1_1gpu_1_1GpuResources" kindref="compound">GpuResources</ref> object gets cleaned up. We are guaranteed that all Faiss GPU work is ordered with respect to this stream upon exit from an index or other Faiss GPU call. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="74" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a9c01fa8034c5fcb8ef797293873ab75d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::StandardGpuResourcesImpl::revertDefaultStream</definition>
        <argsstring>(int device)</argsstring>
        <name>revertDefaultStream</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::revertDefaultStream</qualifiedname>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Revert the default stream to the original stream managed by this resources object, in case someone called <computeroutput>setDefaultStream</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="78" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ade7aa26366d1dae8b5eafc445bdbc465" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>cudaStream_t</type>
        <definition>cudaStream_t faiss::gpu::StandardGpuResourcesImpl::getDefaultStream</definition>
        <argsstring>(int device) override</argsstring>
        <name>getDefaultStream</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::getDefaultStream</qualifiedname>
        <reimplements refid="classfaiss_1_1gpu_1_1GpuResources_1a6c564198df6ba675920c993e2af34b8c">getDefaultStream</reimplements>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the stream for the given device on which all Faiss GPU work is ordered. We are guaranteed that all Faiss GPU work is ordered with respect to this stream upon exit from an index or other Faiss GPU call. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="84" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1af7f1af9afed27148890d5e4aaabe10d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::StandardGpuResourcesImpl::setDefaultNullStreamAllDevices</definition>
        <argsstring>()</argsstring>
        <name>setDefaultNullStreamAllDevices</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::setDefaultNullStreamAllDevices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called to change the work ordering streams to the null stream for all devices </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="94" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ace6a664d48bf37e59cc4adb942a35ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::StandardGpuResourcesImpl::setLogMemoryAllocations</definition>
        <argsstring>(bool enable)</argsstring>
        <name>setLogMemoryAllocations</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::setLogMemoryAllocations</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If enabled, will print every GPU memory allocation and deallocation to standard output </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="98" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a5a7f41d69de7b8ec6b9b5d99cc39e86b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::gpu::StandardGpuResourcesImpl::initializeForDevice</definition>
        <argsstring>(int device) override</argsstring>
        <name>initializeForDevice</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::initializeForDevice</qualifiedname>
        <reimplements refid="classfaiss_1_1gpu_1_1GpuResources_1a1f7f4e220ce279257e1daf929c3b0d4e">initializeForDevice</reimplements>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Internal system calls. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize resources for this device </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="104" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a7a2b9d0db8057ec24a4acbdad5acf984" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>cublasHandle_t</type>
        <definition>cublasHandle_t faiss::gpu::StandardGpuResourcesImpl::getBlasHandle</definition>
        <argsstring>(int device) override</argsstring>
        <name>getBlasHandle</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::getBlasHandle</qualifiedname>
        <reimplements refid="classfaiss_1_1gpu_1_1GpuResources_1aa2682b8503dfdab4f7f5ef867035ad29">getBlasHandle</reimplements>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns the cuBLAS handle that we use for the given device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="106" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1af9a8e76274a5df7ee6ffb0c1e599e3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; cudaStream_t &gt;</type>
        <definition>std::vector&lt; cudaStream_t &gt; faiss::gpu::StandardGpuResourcesImpl::getAlternateStreams</definition>
        <argsstring>(int device) override</argsstring>
        <name>getAlternateStreams</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::getAlternateStreams</qualifiedname>
        <reimplements refid="classfaiss_1_1gpu_1_1GpuResources_1ad2927cebe60fc23d8289876e0ac44827">getAlternateStreams</reimplements>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns the set of alternative streams that we use for the given device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="108" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ae53b5744edf67d4f7cb5d5112aa400cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void * faiss::gpu::StandardGpuResourcesImpl::allocMemory</definition>
        <argsstring>(const AllocRequest &amp;req) override</argsstring>
        <name>allocMemory</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::allocMemory</qualifiedname>
        <reimplements refid="classfaiss_1_1gpu_1_1GpuResources_1a71dfb5a753fd0b54a051197ee6fd2c03">allocMemory</reimplements>
        <param>
          <type>const <ref refid="structfaiss_1_1gpu_1_1AllocRequest" kindref="compound">AllocRequest</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Allocate non-temporary GPU memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="111" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a00d69ab624340410818c700b9019475d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::gpu::StandardGpuResourcesImpl::deallocMemory</definition>
        <argsstring>(int device, void *in) override</argsstring>
        <name>deallocMemory</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::deallocMemory</qualifiedname>
        <reimplements refid="classfaiss_1_1gpu_1_1GpuResources_1a0f444157f93f8c99cf1ce12591818d3d">deallocMemory</reimplements>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Returns a previous allocation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="114" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a633cfc45b53aa74156418ddc108c8167" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t faiss::gpu::StandardGpuResourcesImpl::getTempMemoryAvailable</definition>
        <argsstring>(int device) const override</argsstring>
        <name>getTempMemoryAvailable</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::getTempMemoryAvailable</qualifiedname>
        <reimplements refid="classfaiss_1_1gpu_1_1GpuResources_1abfad190786252900370003ed02b3f411">getTempMemoryAvailable</reimplements>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For MemorySpace::Temporary, how much space is immediately available without cudaMalloc allocation? </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="116" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a41c537ffcbf457313aef5323b922ec91" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, std::map&lt; std::string, std::pair&lt; int, size_t &gt; &gt; &gt;</type>
        <definition>std::map&lt; int, std::map&lt; std::string, std::pair&lt; int, size_t &gt; &gt; &gt; faiss::gpu::StandardGpuResourcesImpl::getMemoryInfo</definition>
        <argsstring>() const</argsstring>
        <name>getMemoryInfo</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::getMemoryInfo</qualifiedname>
        <briefdescription>
<para>Export a description of memory used for Python. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="119" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ad04a26c558a95a2af3191e316d92b68e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::pair&lt; void *, size_t &gt;</type>
        <definition>std::pair&lt; void *, size_t &gt; faiss::gpu::StandardGpuResourcesImpl::getPinnedMemory</definition>
        <argsstring>() override</argsstring>
        <name>getPinnedMemory</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::getPinnedMemory</qualifiedname>
        <reimplements refid="classfaiss_1_1gpu_1_1GpuResources_1a29c1d03e45d74d4464a68cbdfdfb66ba">getPinnedMemory</reimplements>
        <briefdescription>
<para>Returns the available CPU pinned memory buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="122" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a28beb152642c2621724c7eedb088630c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>cudaStream_t</type>
        <definition>cudaStream_t faiss::gpu::StandardGpuResourcesImpl::getAsyncCopyStream</definition>
        <argsstring>(int device) override</argsstring>
        <name>getAsyncCopyStream</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::getAsyncCopyStream</qualifiedname>
        <reimplements refid="classfaiss_1_1gpu_1_1GpuResources_1a104b291ed4116033752144e90856c2e7">getAsyncCopyStream</reimplements>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns the stream on which we perform async CPU &lt;-&gt; GPU copies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="124" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a867681740486f732c786f0d1af782076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::GpuResources::supportsBFloat16CurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>supportsBFloat16CurrentDevice</name>
        <qualifiedname>faiss::gpu::GpuResources::supportsBFloat16CurrentDevice</qualifiedname>
        <briefdescription>
<para>Does the current GPU support bfloat16? </para>
        </briefdescription>
        <detaileddescription>
<para>Functions provided by default </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="259" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a00cb7bcbc5f1a00da673f30749149b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cublasHandle_t</type>
        <definition>cublasHandle_t faiss::gpu::GpuResources::getBlasHandleCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getBlasHandleCurrentDevice</name>
        <qualifiedname>faiss::gpu::GpuResources::getBlasHandleCurrentDevice</qualifiedname>
        <briefdescription>
<para>Calls getBlasHandle with the current device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="262" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1aa0354aa570c24e17a9f8a6a45b153ed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaStream_t</type>
        <definition>cudaStream_t faiss::gpu::GpuResources::getDefaultStreamCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getDefaultStreamCurrentDevice</name>
        <qualifiedname>faiss::gpu::GpuResources::getDefaultStreamCurrentDevice</qualifiedname>
        <briefdescription>
<para>Calls getDefaultStream with the current device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="265" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1aeb57bc66a9823aaf140324e22985a71d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::gpu::GpuResources::getTempMemoryAvailableCurrentDevice</definition>
        <argsstring>() const</argsstring>
        <name>getTempMemoryAvailableCurrentDevice</name>
        <qualifiedname>faiss::gpu::GpuResources::getTempMemoryAvailableCurrentDevice</qualifiedname>
        <briefdescription>
<para>Calls getTempMemoryAvailable with the current device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="268" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1af0949f87d4f522b7ee5be17ad760b266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1gpu_1_1GpuMemoryReservation" kindref="compound">GpuMemoryReservation</ref></type>
        <definition>GpuMemoryReservation faiss::gpu::GpuResources::allocMemoryHandle</definition>
        <argsstring>(const AllocRequest &amp;req)</argsstring>
        <name>allocMemoryHandle</name>
        <qualifiedname>faiss::gpu::GpuResources::allocMemoryHandle</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1gpu_1_1AllocRequest" kindref="compound">AllocRequest</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Returns a temporary memory allocation via a RAII object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="271" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a130deab9f6d49cbdde8f9da45ce868fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuResources::syncDefaultStream</definition>
        <argsstring>(int device)</argsstring>
        <name>syncDefaultStream</name>
        <qualifiedname>faiss::gpu::GpuResources::syncDefaultStream</qualifiedname>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronizes the CPU with respect to the default stream for the given device </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="276" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1adf6a5653ec2bbb0e9d58a0e1dd73897f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuResources::syncDefaultStreamCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>syncDefaultStreamCurrentDevice</name>
        <qualifiedname>faiss::gpu::GpuResources::syncDefaultStreamCurrentDevice</qualifiedname>
        <briefdescription>
<para>Calls syncDefaultStream for the current device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="279" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a622f95597cc2ed2f10f3ae9400dc685b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; cudaStream_t &gt;</type>
        <definition>std::vector&lt; cudaStream_t &gt; faiss::gpu::GpuResources::getAlternateStreamsCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getAlternateStreamsCurrentDevice</name>
        <qualifiedname>faiss::gpu::GpuResources::getAlternateStreamsCurrentDevice</qualifiedname>
        <briefdescription>
<para>Calls getAlternateStreams for the current device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="282" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1aefb90d15fade57cdfcff03ec800183d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaStream_t</type>
        <definition>cudaStream_t faiss::gpu::GpuResources::getAsyncCopyStreamCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getAsyncCopyStreamCurrentDevice</name>
        <qualifiedname>faiss::gpu::GpuResources::getAsyncCopyStreamCurrentDevice</qualifiedname>
        <briefdescription>
<para>Calls getAsyncCopyStream for the current device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="285" column="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a55c7e84b0f56ea2c591fd14415a23dd2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::StandardGpuResourcesImpl::isInitialized</definition>
        <argsstring>(int device) const</argsstring>
        <name>isInitialized</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::isInitialized</qualifiedname>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Have GPU resources been initialized for this device yet? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="128" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a8ec365660c997441b2cf5faea71c36bb" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t faiss::gpu::StandardGpuResourcesImpl::getDefaultTempMemForGPU</definition>
        <argsstring>(int device, size_t requested)</argsstring>
        <name>getDefaultTempMemForGPU</name>
        <qualifiedname>faiss::gpu::StandardGpuResourcesImpl::getDefaultTempMemForGPU</qualifiedname>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>requested</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adjust the default temporary memory allocation based on the total GPU memory size </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/StandardGpuResources.h" line="132" column="19"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Standard implementation of the <ref refid="classfaiss_1_1gpu_1_1GpuResources" kindref="compound">GpuResources</ref> object that provides for a temporary memory manager </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>faiss::gpu::GpuResources</label>
        <link refid="classfaiss_1_1gpu_1_1GpuResources"/>
      </node>
      <node id="1">
        <label>faiss::gpu::StandardGpuResourcesImpl</label>
        <link refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>faiss::gpu::GpuResources</label>
        <link refid="classfaiss_1_1gpu_1_1GpuResources"/>
      </node>
      <node id="1">
        <label>faiss::gpu::StandardGpuResourcesImpl</label>
        <link refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="faiss/gpu/StandardGpuResources.h" line="45" column="1" bodyfile="faiss/gpu/StandardGpuResources.h" bodystart="45" bodyend="192"/>
    <listofallmembers>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ad157e95342116754b0be81a8e5775343" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>allocLogging_</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ae53b5744edf67d4f7cb5d5112aa400cc" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>allocMemory</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1af0949f87d4f522b7ee5be17ad760b266" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>allocMemoryHandle</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1aaf1d435773c0b0a0571fa397c9bfaa6a" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>allocs_</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a6b511d4f63fe99e81624a2a5b13847b2" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>alternateStreams_</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a8ca38d5ac22483ae58a0fe5555998846" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>asyncCopyStreams_</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1af1c41ca22c2e5b2c7451759223f9f3db" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>blasHandles_</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a00d69ab624340410818c700b9019475d" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>deallocMemory</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a20022e4935d985f8e274e5cd1bc37187" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>defaultStreams_</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1af9a8e76274a5df7ee6ffb0c1e599e3c7" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getAlternateStreams</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a622f95597cc2ed2f10f3ae9400dc685b" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getAlternateStreamsCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a28beb152642c2621724c7eedb088630c" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getAsyncCopyStream</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1aefb90d15fade57cdfcff03ec800183d4" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getAsyncCopyStreamCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a7a2b9d0db8057ec24a4acbdad5acf984" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getBlasHandle</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a00cb7bcbc5f1a00da673f30749149b12" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getBlasHandleCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ade7aa26366d1dae8b5eafc445bdbc465" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getDefaultStream</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1aa0354aa570c24e17a9f8a6a45b153ed2" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getDefaultStreamCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a8ec365660c997441b2cf5faea71c36bb" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getDefaultTempMemForGPU</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a41c537ffcbf457313aef5323b922ec91" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getMemoryInfo</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ad04a26c558a95a2af3191e316d92b68e" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getPinnedMemory</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a633cfc45b53aa74156418ddc108c8167" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getTempMemoryAvailable</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1aeb57bc66a9823aaf140324e22985a71d" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>getTempMemoryAvailableCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a5a7f41d69de7b8ec6b9b5d99cc39e86b" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>initializeForDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a55c7e84b0f56ea2c591fd14415a23dd2" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>isInitialized</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a37459ad7862e50792e6498289c7f81b7" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>noTempMemory</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a54c32dec0e85b9316426c89085e03b3c" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>pinnedMemAlloc_</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1aed791b318265666dd2b6fde3863f7d18" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>pinnedMemAllocSize_</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a68fb215506fb57a4adca5b289808c79f" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>pinnedMemSize_</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a9c01fa8034c5fcb8ef797293873ab75d" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>revertDefaultStream</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1af7f1af9afed27148890d5e4aaabe10d5" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>setDefaultNullStreamAllDevices</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1aea675757238dda776033cd8607c6daef" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>setDefaultStream</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ace6a664d48bf37e59cc4adb942a35ad7" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>setLogMemoryAllocations</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a63bd261de7e331760dea2e59ac26c036" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>setPinnedMemory</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a95ec5cc373c8aeefcacd55ee0be0dff3" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>setTempMemory</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a416835fae3db3685e40f42c8260f8745" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>StandardGpuResourcesImpl</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ad2267943823c25e95b28733bf1177935" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>supportsBFloat16</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a867681740486f732c786f0d1af782076" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>supportsBFloat16CurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a130deab9f6d49cbdde8f9da45ce868fd" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>syncDefaultStream</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1adf6a5653ec2bbb0e9d58a0e1dd73897f" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>syncDefaultStreamCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ae246ade2809d7dc770dcc52183b8b498" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>tempMemory_</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a62e7ab153d60395b6e4906f223a60116" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>tempMemSize_</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ad7a1e48b4128742c29a97f87ccecdd11" prot="protected" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>userDefaultStreams_</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a979a487daf95fc077321e4cd8020278c" prot="public" virt="virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>~GpuResources</name></member>
      <member refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a6c05d4e676be74d65d44ccb23eb63f63" prot="public" virt="non-virtual"><scope>faiss::gpu::StandardGpuResourcesImpl</scope><name>~StandardGpuResourcesImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
