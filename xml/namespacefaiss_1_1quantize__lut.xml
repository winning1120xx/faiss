<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacefaiss_1_1quantize__lut" kind="namespace" language="C++">
    <compoundname>faiss::quantize_lut</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacefaiss_1_1quantize__lut_1a71df0d46800a39a482d566c091623785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::quantize_lut::round_uint8_per_column</definition>
        <argsstring>(float *tab, size_t n, size_t d, float *a_out=nullptr, float *b_out=nullptr)</argsstring>
        <name>round_uint8_per_column</name>
        <qualifiedname>faiss::quantize_lut::round_uint8_per_column</qualifiedname>
        <param>
          <type>float *</type>
          <declname>tab</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a_out</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float *</type>
          <declname>b_out</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/quantize_lut.h" line="32" column="6" declfile="faiss/utils/quantize_lut.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1_1quantize__lut_1aaca4bcc4d17e5c66dbc07a7f93cad911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::quantize_lut::round_uint8_per_column_multi</definition>
        <argsstring>(float *tab, size_t m, size_t n, size_t d, float *a_out=nullptr, float *b_out=nullptr)</argsstring>
        <name>round_uint8_per_column_multi</name>
        <qualifiedname>faiss::quantize_lut::round_uint8_per_column_multi</qualifiedname>
        <param>
          <type>float *</type>
          <declname>tab</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a_out</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float *</type>
          <declname>b_out</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/quantize_lut.h" line="43" column="6" declfile="faiss/utils/quantize_lut.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1_1quantize__lut_1a352d817a7e7c95c57c2cce10b77e3248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::quantize_lut::quantize_LUT_and_bias</definition>
        <argsstring>(size_t nprobe, size_t M, size_t ksub, bool lut_is_3d, const float *LUT, const float *bias, uint8_t *LUTq, size_t M2, uint16_t *biasq, float *a_out=nullptr, float *b_out=nullptr)</argsstring>
        <name>quantize_LUT_and_bias</name>
        <qualifiedname>faiss::quantize_lut::quantize_LUT_and_bias</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nprobe</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ksub</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lut_is_3d</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>LUT</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>LUTq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M2</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>biasq</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a_out</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float *</type>
          <declname>b_out</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LUT quantization to uint8 and bias to uint16.</para>
<para>(nprobe, M, ksub, lut_is_3d) determine the size of the the LUT</para>
<para>LUT input:<itemizedlist>
<listitem><para>2D size (M, ksub): single matrix per probe (lut_is_3d=false)</para>
</listitem><listitem><para>3D size (nprobe, M, ksub): separate LUT per probe (lut_is_3d=true) bias input:</para>
</listitem><listitem><para>nullptr: bias is 0</para>
</listitem><listitem><para>size (nprobe): one bias per probe Output:</para>
</listitem><listitem><para>LUTq uint8 version of the LUT (M size is rounded up to M2)</para>
</listitem><listitem><para>biasq (or nullptr): uint16 version of the LUT</para>
</listitem><listitem><para>a, b: scalars to approximate the true distance </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/quantize_lut.h" line="67" column="6" declfile="faiss/utils/quantize_lut.h" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1_1quantize__lut_1aa7e6fdcb7243e623e4b160308f761ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::quantize_lut::aq_quantize_LUT_and_bias</definition>
        <argsstring>(size_t nprobe, size_t M, size_t ksub, const float *LUT, const float *bias, size_t M_norm, int norm_scale, uint8_t *LUTq, size_t M2, uint16_t *biasq, float *a_out, float *b_out)</argsstring>
        <name>aq_quantize_LUT_and_bias</name>
        <qualifiedname>faiss::quantize_lut::aq_quantize_LUT_and_bias</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nprobe</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ksub</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>LUT</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M_norm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>norm_scale</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>LUTq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M2</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>biasq</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a_out</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>b_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/quantize_lut.h" line="80" column="6" declfile="faiss/utils/quantize_lut.h" declline="80" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1_1quantize__lut_1ab93e886d01cd9809d0c7ae3b7203f92a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::quantize_lut::aq_estimate_norm_scale</definition>
        <argsstring>(size_t M, size_t ksub, size_t M_norm, const float *LUT)</argsstring>
        <name>aq_estimate_norm_scale</name>
        <qualifiedname>faiss::quantize_lut::aq_estimate_norm_scale</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ksub</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M_norm</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>LUT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/quantize_lut.h" line="94" column="7" declfile="faiss/utils/quantize_lut.h" declline="94" declcolumn="7"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Functions to quantize PQ floating-point Look Up Tables (LUT) to uint8, and biases to uint16. The accumulation is supposed to take place in uint16. The quantization coefficients are float (a, b) such that <verbatim> original_value = quantized_value * a / b
</verbatim> The hardest part of the quantization is with multiple LUTs that need to be added up together. In that case, coefficient a has to be chosen so that the sum fits in a uint16 accumulator. </para>
    </detaileddescription>
    <location file="faiss/utils/quantize_lut.h" line="26" column="1"/>
  </compounddef>
</doxygen>
