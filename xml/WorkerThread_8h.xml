<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="WorkerThread_8h" kind="file" language="C++">
    <compoundname>WorkerThread.h</compoundname>
    <includes local="no">condition_variable</includes>
    <includes local="no">deque</includes>
    <includes local="no">functional</includes>
    <includes local="no">future</includes>
    <includes local="no">thread</includes>
    <includedby refid="ThreadedIndex_8h" local="no">faiss/impl/ThreadedIndex.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>faiss/utils/WorkerThread.h</label>
        <link refid="WorkerThread_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>condition_variable</label>
      </node>
      <node id="3">
        <label>deque</label>
      </node>
      <node id="4">
        <label>functional</label>
      </node>
      <node id="5">
        <label>future</label>
      </node>
      <node id="6">
        <label>thread</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>faiss/IndexReplicas.h</label>
        <link refid="IndexReplicas_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>faiss/IndexShards.h</label>
        <link refid="IndexShards_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>faiss/IndexShardsIVF.h</label>
        <link refid="IndexShardsIVF_8h_source"/>
      </node>
      <node id="4">
        <label>faiss/MetaIndexes.h</label>
        <link refid="MetaIndexes_8h_source"/>
      </node>
      <node id="5">
        <label>faiss/gpu/perf/IndexWrapper.h</label>
        <link refid="IndexWrapper_8h_source"/>
      </node>
      <node id="2">
        <label>faiss/impl/ThreadedIndex.h</label>
        <link refid="ThreadedIndex_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>faiss/utils/WorkerThread.h</label>
        <link refid="WorkerThread_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classfaiss_1_1WorkerThread" prot="public">faiss::WorkerThread</innerclass>
    <innernamespace refid="namespacefaiss">faiss</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Meta<sp/>Platforms,<sp/>Inc.<sp/>and<sp/>affiliates.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;condition_variable&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;future&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefaiss" kindref="compound">faiss</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="classfaiss_1_1WorkerThread" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfaiss_1_1WorkerThread" kindref="compound">WorkerThread</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfaiss_1_1WorkerThread" kindref="compound">WorkerThread</ref>();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Stops<sp/>and<sp/>waits<sp/>for<sp/>the<sp/>worker<sp/>thread<sp/>to<sp/>exit,<sp/>flushing<sp/>all</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>pending<sp/>lambdas</highlight></codeline>
<codeline lineno="24" refid="classfaiss_1_1WorkerThread_1abe8c60d6c08a7287013d82c7b77bc8b1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfaiss_1_1WorkerThread_1abe8c60d6c08a7287013d82c7b77bc8b1" kindref="member">~WorkerThread</ref>();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Request<sp/>that<sp/>the<sp/>worker<sp/>thread<sp/>stop<sp/>itself</highlight></codeline>
<codeline lineno="27" refid="classfaiss_1_1WorkerThread_1a5230264fa557f6d77c5fed5601a8c857" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfaiss_1_1WorkerThread_1a5230264fa557f6d77c5fed5601a8c857" kindref="member">stop</ref>();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Blocking<sp/>waits<sp/>in<sp/>the<sp/>current<sp/>thread<sp/>for<sp/>the<sp/>worker<sp/>thread<sp/>to</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>stop</highlight></codeline>
<codeline lineno="31" refid="classfaiss_1_1WorkerThread_1a29c8cfced812372adb93440545c05edc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfaiss_1_1WorkerThread_1a29c8cfced812372adb93440545c05edc" kindref="member">waitForThreadExit</ref>();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Adds<sp/>a<sp/>lambda<sp/>to<sp/>run<sp/>on<sp/>the<sp/>worker<sp/>thread;<sp/>returns<sp/>a<sp/>future<sp/>that</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>can<sp/>be<sp/>used<sp/>to<sp/>block<sp/>on<sp/>its<sp/>completion.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Future<sp/>status<sp/>is<sp/>`true`<sp/>if<sp/>the<sp/>lambda<sp/>was<sp/>run<sp/>in<sp/>the<sp/>worker</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>thread;<sp/>`false`<sp/>if<sp/>it<sp/>was<sp/>not<sp/>run,<sp/>because<sp/>the<sp/>worker<sp/>thread<sp/>is</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>exiting<sp/>or<sp/>has<sp/>exited.</highlight></codeline>
<codeline lineno="38" refid="classfaiss_1_1WorkerThread_1a484b472c878bb35e4fed5f5ec6733d79" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::future&lt;bool&gt;<sp/><ref refid="classfaiss_1_1WorkerThread_1a484b472c878bb35e4fed5f5ec6733d79" kindref="member">add</ref>(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;<sp/>f);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>startThread();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>threadMain();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>threadLoop();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Thread<sp/>that<sp/>all<sp/>queued<sp/>lambdas<sp/>are<sp/>run<sp/>on</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>thread_;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Mutex<sp/>for<sp/>the<sp/>queue<sp/>and<sp/>exit<sp/>status</highlight></codeline>
<codeline lineno="49"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::mutex<sp/>mutex_;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Monitor<sp/>for<sp/>the<sp/>exit<sp/>status<sp/>and<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::condition_variable<sp/>monitor_;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Whether<sp/>or<sp/>not<sp/>we<sp/>want<sp/>the<sp/>thread<sp/>to<sp/>exit</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wantStop_;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Queue<sp/>of<sp/>pending<sp/>lambdas<sp/>to<sp/>call</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::deque&lt;std::pair&lt;std::function&lt;void()&gt;,<sp/>std::promise&lt;bool&gt;&gt;&gt;<sp/>queue_;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>faiss</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="faiss/utils/WorkerThread.h"/>
  </compounddef>
</doxygen>
