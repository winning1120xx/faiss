<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacefaiss_1_1ivflib" kind="namespace" language="C++">
    <compoundname>faiss::ivflib</compoundname>
    <innerclass refid="structfaiss_1_1ivflib_1_1DefaultShardingFunction" prot="public">faiss::ivflib::DefaultShardingFunction</innerclass>
    <innerclass refid="structfaiss_1_1ivflib_1_1ShardingFunction" prot="public">faiss::ivflib::ShardingFunction</innerclass>
    <innerclass refid="structfaiss_1_1ivflib_1_1SlidingIndexWindow" prot="public">faiss::ivflib::SlidingIndexWindow</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="IVFlib_8h_1aeb9efc826d09730a24d5f3b179222033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ivflib::check_compatible_for_merge</definition>
        <argsstring>(const Index *index1, const Index *index2)</argsstring>
        <name>check_compatible_for_merge</name>
        <qualifiedname>faiss::ivflib::check_compatible_for_merge</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index1</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check if two indexes have the same parameters and are trained in the same way, otherwise throw. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="31" column="6" declfile="faiss/IVFlib.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1a73c11c3c801b554a6fe55545b5a68aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref> *</type>
        <definition>const IndexIVF * faiss::ivflib::extract_index_ivf</definition>
        <argsstring>(const Index *index)</argsstring>
        <name>extract_index_ivf</name>
        <qualifiedname>faiss::ivflib::extract_index_ivf</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get an <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref> from an index. The index may be an <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref> or some wrapper class that encloses an <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref></para>
<para>throws an exception if this is not the case. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="38" column="16" declfile="faiss/IVFlib.h" declline="38" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1ac7a58bb019c8164221457029cd69bed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref> *</type>
        <definition>IndexIVF * faiss::ivflib::extract_index_ivf</definition>
        <argsstring>(Index *index)</argsstring>
        <name>extract_index_ivf</name>
        <qualifiedname>faiss::ivflib::extract_index_ivf</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="39" column="10" declfile="faiss/IVFlib.h" declline="39" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1adc6fd964bb0944b737b79875a74788e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref> *</type>
        <definition>const IndexIVF * faiss::ivflib::try_extract_index_ivf</definition>
        <argsstring>(const Index *index)</argsstring>
        <name>try_extract_index_ivf</name>
        <qualifiedname>faiss::ivflib::try_extract_index_ivf</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>same as above but returns nullptr instead of throwing on failure </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="42" column="16" declfile="faiss/IVFlib.h" declline="42" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1ac7ceabdf2f0c1f41039c42c032691473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref> *</type>
        <definition>IndexIVF * faiss::ivflib::try_extract_index_ivf</definition>
        <argsstring>(Index *index)</argsstring>
        <name>try_extract_index_ivf</name>
        <qualifiedname>faiss::ivflib::try_extract_index_ivf</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="43" column="10" declfile="faiss/IVFlib.h" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1a342382b7b7a6c4e769a9b6bbfe8becaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ivflib::merge_into</definition>
        <argsstring>(Index *index0, Index *index1, bool shift_ids)</argsstring>
        <name>merge_into</name>
        <qualifiedname>faiss::ivflib::merge_into</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index0</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index1</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shift_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merge index1 into index0. Works on <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref>&apos;s and <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref>&apos;s embedded in a <ref refid="structfaiss_1_1IndexPreTransform" kindref="compound">IndexPreTransform</ref>. On output, the index1 is empty.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>translate the ids from index1 to index0-&gt;prev_ntotal </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="50" column="6" declfile="faiss/IVFlib.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1ad23c0309490017e0a4f7bf50eb873ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ivflib::search_centroid</definition>
        <argsstring>(Index *index, const float *x, int n, idx_t *centroid_ids)</argsstring>
        <name>search_centroid</name>
        <qualifiedname>faiss::ivflib::search_centroid</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>centroid_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="61" column="6" declfile="faiss/IVFlib.h" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1a739f3822af902e9b9fb8104415dc0ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ivflib::search_and_return_centroids</definition>
        <argsstring>(Index *index, size_t n, const float *xin, long k, float *distances, idx_t *labels, idx_t *query_centroid_ids, idx_t *result_centroid_ids)</argsstring>
        <name>search_and_return_centroids</name>
        <qualifiedname>faiss::ivflib::search_and_return_centroids</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xin</declname>
        </param>
        <param>
          <type>long</type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>query_centroid_ids</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>result_centroid_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="73" column="6" declfile="faiss/IVFlib.h" declline="73" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1a28aac05f31a5d8301f24dd599c5c204b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1ArrayInvertedLists" kindref="compound">ArrayInvertedLists</ref> *</type>
        <definition>ArrayInvertedLists * faiss::ivflib::get_invlist_range</definition>
        <argsstring>(const Index *index, long i0, long i1)</argsstring>
        <name>get_invlist_range</name>
        <qualifiedname>faiss::ivflib::get_invlist_range</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>long</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>long</type>
          <declname>i1</declname>
        </param>
        <briefdescription>
<para>Get a subset of inverted lists [i0, i1) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="113" column="20" declfile="faiss/IVFlib.h" declline="113" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1a01332806047c09400a8c73f1fd400699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ivflib::set_invlist_range</definition>
        <argsstring>(Index *index, long i0, long i1, ArrayInvertedLists *src)</argsstring>
        <name>set_invlist_range</name>
        <qualifiedname>faiss::ivflib::set_invlist_range</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>long</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>long</type>
          <declname>i1</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1ArrayInvertedLists" kindref="compound">ArrayInvertedLists</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Set a subset of inverted lists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="116" column="6" declfile="faiss/IVFlib.h" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1a113970d7b83b793fe22b2cf2bb73a78b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ivflib::search_with_parameters</definition>
        <argsstring>(const Index *index, idx_t n, const float *x, idx_t k, float *distances, idx_t *labels, const IVFSearchParameters *params, size_t *nb_dis=nullptr, double *ms_per_stage=nullptr)</argsstring>
        <name>search_with_parameters</name>
        <qualifiedname>faiss::ivflib::search_with_parameters</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParametersIVF" kindref="compound">IVFSearchParameters</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>nb_dis</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>ms_per_stage</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>search an <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref>, possibly embedded in an <ref refid="structfaiss_1_1IndexPreTransform" kindref="compound">IndexPreTransform</ref> with given parameters. This is a way to set the nprobe and get statdistics in a thread-safe way.</para>
<para>Optionally returns (if non-nullptr):<itemizedlist>
<listitem><para>nb_dis: number of distances computed</para>
</listitem><listitem><para>ms_per_stage: [0]: preprocessing time [1]: coarse quantization, [2]: list scanning </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="128" column="6" declfile="faiss/IVFlib.h" declline="128" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1aa30ade5c6f5c5e11f70828dc2ca8359a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ivflib::range_search_with_parameters</definition>
        <argsstring>(const Index *index, idx_t n, const float *x, float radius, RangeSearchResult *result, const IVFSearchParameters *params, size_t *nb_dis=nullptr, double *ms_per_stage=nullptr)</argsstring>
        <name>range_search_with_parameters</name>
        <qualifiedname>faiss::ivflib::range_search_with_parameters</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1RangeSearchResult" kindref="compound">RangeSearchResult</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParametersIVF" kindref="compound">IVFSearchParameters</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>nb_dis</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>ms_per_stage</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>same as search_with_parameters but for range search </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="140" column="6" declfile="faiss/IVFlib.h" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1ad4e104b5a77c21bda47ea76cb1896ecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexIVFResidualQuantizer" kindref="compound">IndexIVFResidualQuantizer</ref> *</type>
        <definition>IndexIVFResidualQuantizer * faiss::ivflib::ivf_residual_from_quantizer</definition>
        <argsstring>(const ResidualQuantizer &amp;, int nlevel)</argsstring>
        <name>ivf_residual_from_quantizer</name>
        <qualifiedname>faiss::ivflib::ivf_residual_from_quantizer</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1ResidualQuantizer" kindref="compound">ResidualQuantizer</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
          <declname>nlevel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build an <ref refid="structfaiss_1_1IndexIVFResidualQuantizer" kindref="compound">IndexIVFResidualQuantizer</ref> from an <ref refid="structfaiss_1_1ResidualQuantizer" kindref="compound">ResidualQuantizer</ref>, using the nlevel first components as coarse quantizer and the rest as codes in invlists </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="153" column="27" declfile="faiss/IVFlib.h" declline="153" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1a981899051705c18c6cae85d1f81b8e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ivflib::ivf_residual_add_from_flat_codes</definition>
        <argsstring>(IndexIVFResidualQuantizer *ivfrq, size_t ncode, const uint8_t *codes, int64_t code_size=-1)</argsstring>
        <name>ivf_residual_add_from_flat_codes</name>
        <qualifiedname>faiss::ivflib::ivf_residual_add_from_flat_codes</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IndexIVFResidualQuantizer" kindref="compound">IndexIVFResidualQuantizer</ref> *</type>
          <declname>ivfrq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncode</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>code_size</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>add from codes. NB that the norm component is not used, so the code_size can be provided.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ivfrq</parametername>
</parameternamelist>
<parameterdescription>
<para>index to populate with the codes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>codes to add, size (ncode, code_size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code_size</parametername>
</parameternamelist>
<parameterdescription>
<para>override the ivfrq&apos;s code_size, useful if the norm encoding is different </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="165" column="6" declfile="faiss/IVFlib.h" declline="165" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1a75fc271debbf354dbf739b8cffc8a725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ivflib::shard_ivf_index_centroids</definition>
        <argsstring>(IndexIVF *index, int64_t shard_count=20, const std::string &amp;filename_template=&quot;shard.%d.index&quot;, ShardingFunction *sharding_function=nullptr, bool generate_ids=false)</argsstring>
        <name>shard_ivf_index_centroids</name>
        <qualifiedname>faiss::ivflib::shard_ivf_index_centroids</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>shard_count</declname>
          <defval>20</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename_template</declname>
          <defval>&quot;shard.%d.index&quot;</defval>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1ivflib_1_1ShardingFunction" kindref="compound">ShardingFunction</ref> *</type>
          <declname>sharding_function</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>generate_ids</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shards an IVF index centroids by the given sharding function, and writes the index to the path given by filename_generator. The centroids must already be added to the index quantizer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The IVF index containing centroids to shard. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shard_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of shards. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename_template</parametername>
</parameternamelist>
<parameterdescription>
<para>Template for shard filenames. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sharding_function</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to shard by. The default is ith vector mod shard_count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generate_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Generates ids using IndexIDMap2. If true, ids will match the default ids in the unsharded index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of shards written. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="198" column="6" declfile="faiss/IVFlib.h" declline="198" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="IVFlib_8h_1a7386ca19b896152c0af3d9ae4edf45c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ivflib::shard_binary_ivf_index_centroids</definition>
        <argsstring>(faiss::IndexBinaryIVF *index, int64_t shard_count=20, const std::string &amp;filename_template=&quot;shard.%d.index&quot;, ShardingFunction *sharding_function=nullptr, bool generate_ids=false)</argsstring>
        <name>shard_binary_ivf_index_centroids</name>
        <qualifiedname>faiss::ivflib::shard_binary_ivf_index_centroids</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IndexBinaryIVF" kindref="compound">faiss::IndexBinaryIVF</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>shard_count</declname>
          <defval>20</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename_template</declname>
          <defval>&quot;shard.%d.index&quot;</defval>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1ivflib_1_1ShardingFunction" kindref="compound">ShardingFunction</ref> *</type>
          <declname>sharding_function</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>generate_ids</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IVFlib.h" line="205" column="6" declfile="faiss/IVFlib.h" declline="205" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="faiss/IVFlib.h" line="27" column="1"/>
  </compounddef>
</doxygen>
