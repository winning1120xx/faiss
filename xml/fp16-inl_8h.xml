<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="fp16-inl_8h" kind="file" language="C++">
    <compoundname>fp16-inl.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cstdint</includes>
    <includedby refid="fp16_8h" local="no">faiss/utils/fp16.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>faiss/utils/fp16-inl.h</label>
        <link refid="fp16-inl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>faiss/cppcontrib/SaDecodeKernels.h</label>
        <link refid="SaDecodeKernels_8h_source"/>
      </node>
      <node id="3">
        <label>faiss/cppcontrib/sa_decode/MinMaxFP16-inl.h</label>
        <link refid="MinMaxFP16-inl_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>faiss/utils/fp16-inl.h</label>
        <link refid="fp16-inl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>faiss/utils/fp16.h</label>
        <link refid="fp16_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacefaiss">faiss</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Meta<sp/>Platforms,<sp/>Inc.<sp/>and<sp/>affiliates.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefaiss" kindref="compound">faiss</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-intrinsic<sp/>FP16<sp/>&lt;-&gt;<sp/>FP32<sp/>code<sp/>adapted<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/ispc/ispc/blob/master/stdlib.ispc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>floatbits(uint32_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>xptr<sp/>=<sp/>&amp;x;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)xptr;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>intbits(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>fptr<sp/>=<sp/>&amp;f;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(uint32_t*)fptr;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint16_t<sp/>encode_fp16(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>via<sp/>Fabian<sp/>&quot;ryg&quot;<sp/>Giesen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://gist.github.com/2156668</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>sign_mask<sp/>=<sp/>0x80000000u;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>o;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>fint<sp/>=<sp/>intbits(f);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>sign<sp/>=<sp/>fint<sp/>&amp;<sp/>sign_mask;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>fint<sp/>^=<sp/>sign;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE<sp/>all<sp/>the<sp/>integer<sp/>compares<sp/>in<sp/>this<sp/>function<sp/>can<sp/>be<sp/>safely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compiled<sp/>into<sp/>signed<sp/>compares<sp/>since<sp/>all<sp/>operands<sp/>are<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0x80000000.<sp/>Important<sp/>if<sp/>you<sp/>want<sp/>fast<sp/>straight<sp/>SSE2<sp/>code<sp/>(since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there&apos;s<sp/>no<sp/>unsigned<sp/>PCMPGTD).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inf<sp/>or<sp/>NaN<sp/>(all<sp/>exponent<sp/>bits<sp/>set)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NaN-&gt;qNaN<sp/>and<sp/>Inf-&gt;Inf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unconditional<sp/>assignment<sp/>here,<sp/>will<sp/>override<sp/>with<sp/>right<sp/>value<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>regular<sp/>case<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>f32infty<sp/>=<sp/>255u<sp/>&lt;&lt;<sp/>23;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>o<sp/>=<sp/>(fint<sp/>&gt;<sp/>f32infty)<sp/>?<sp/>0x7e00u<sp/>:<sp/>0x7c00u;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(De)normalized<sp/>number<sp/>or<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>fint<sp/>unconditionally<sp/>to<sp/>save<sp/>the<sp/>blending;<sp/>we<sp/>don&apos;t<sp/>need<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anymore<sp/>for<sp/>the<sp/>Inf/NaN<sp/>case<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>round_mask<sp/>=<sp/>~0xfffu;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>magic<sp/>=<sp/>15u<sp/>&lt;&lt;<sp/>23;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>exponent<sp/>down,<sp/>denormalize<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE<sp/>This<sp/>represents<sp/>half-float<sp/>denormals<sp/>using<sp/>single</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precision<sp/>denormals.<sp/><sp/>The<sp/>main<sp/>reason<sp/>to<sp/>do<sp/>this<sp/>is<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there&apos;s<sp/>no<sp/>shift<sp/>with<sp/>per-lane<sp/>variable<sp/>shifts<sp/>in<sp/>SSE*,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;d<sp/>otherwise<sp/>need.<sp/>It<sp/>has<sp/>some<sp/>funky<sp/>side<sp/>effects<sp/>though:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>This<sp/>conversion<sp/>will<sp/>actually<sp/>respect<sp/>the<sp/>FTZ<sp/>(Flush<sp/>To<sp/>Zero)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>flag<sp/>in<sp/>MXCSR<sp/>-<sp/>if<sp/>it&apos;s<sp/>set,<sp/>no<sp/>half-float<sp/>denormals<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>generated.<sp/>I&apos;m<sp/>honestly<sp/>not<sp/>sure<sp/>whether<sp/>this<sp/>is<sp/>good<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>bad.<sp/>It&apos;s<sp/>definitely<sp/>interesting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>If<sp/>the<sp/>underlying<sp/>HW<sp/>doesn&apos;t<sp/>support<sp/>denormals<sp/>(not<sp/>an<sp/>issue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>with<sp/>Intel<sp/>CPUs,<sp/>but<sp/>might<sp/>be<sp/>a<sp/>problem<sp/>on<sp/>GPUs<sp/>or<sp/>PS3<sp/>SPUs),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>you<sp/>will<sp/>always<sp/>get<sp/>flush-to-zero<sp/>behavior.<sp/>This<sp/>is<sp/>bad,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>unless<sp/>you&apos;re<sp/>on<sp/>a<sp/>CPU<sp/>where<sp/>you<sp/>don&apos;t<sp/>care.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Denormals<sp/>tend<sp/>to<sp/>be<sp/>slow.<sp/>FP32<sp/>denormals<sp/>are<sp/>rare<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>practice<sp/>outside<sp/>of<sp/>things<sp/>like<sp/>recursive<sp/>filters<sp/>in<sp/>DSP<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>not<sp/>a<sp/>typical<sp/>half-float<sp/>application.<sp/>Whether<sp/>FP16<sp/>denormals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>are<sp/>rare<sp/>in<sp/>practice,<sp/>I<sp/>don&apos;t<sp/>know.<sp/>Whatever<sp/>slow<sp/>path<sp/>your</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>HW<sp/>may<sp/>or<sp/>may<sp/>not<sp/>have<sp/>for<sp/>denormals,<sp/>this<sp/>may<sp/>well<sp/>hit<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fscale<sp/>=<sp/>floatbits(fint<sp/>&amp;<sp/>round_mask)<sp/>*<sp/>floatbits(magic);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>fscale<sp/>=<sp/>std::min(fscale,<sp/>floatbits((31u<sp/>&lt;&lt;<sp/>23)<sp/>-<sp/>0x1000u));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>fint2<sp/>=<sp/>intbits(fscale)<sp/>-<sp/>round_mask;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fint<sp/>&lt;<sp/>f32infty)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>=<sp/>fint2<sp/>&gt;&gt;<sp/>13;<sp/></highlight><highlight class="comment">//<sp/>Take<sp/>the<sp/>bits!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(o<sp/>|<sp/>(sign<sp/>&gt;&gt;<sp/>16));</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>decode_fp16(uint16_t<sp/>h)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://gist.github.com/2144712</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fabian<sp/>&quot;ryg&quot;<sp/>Giesen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>shifted_exp<sp/>=<sp/>0x7c00u<sp/>&lt;&lt;<sp/>13;<sp/></highlight><highlight class="comment">//<sp/>exponent<sp/>mask<sp/>after<sp/>shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>o<sp/>=<sp/>((int32_t)(h<sp/>&amp;<sp/>0x7fffu))<sp/>&lt;&lt;<sp/>13;<sp/></highlight><highlight class="comment">//<sp/>exponent/mantissa<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>exp<sp/>=<sp/>shifted_exp<sp/>&amp;<sp/>o;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>the<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>o<sp/>+=<sp/>(int32_t)(127<sp/>-<sp/>15)<sp/>&lt;&lt;<sp/>23;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exponent<sp/>adjust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>infnan_val<sp/>=<sp/>o<sp/>+<sp/>((int32_t)(128<sp/>-<sp/>16)<sp/>&lt;&lt;<sp/>23);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>zerodenorm_val<sp/>=</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intbits(floatbits(o<sp/>+<sp/>(1u<sp/>&lt;&lt;<sp/>23))<sp/>-<sp/>floatbits(113u<sp/>&lt;&lt;<sp/>23));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>reg_val<sp/>=<sp/>(exp<sp/>==<sp/>0)<sp/>?<sp/>zerodenorm_val<sp/>:<sp/>o;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>sign_bit<sp/>=<sp/>((int32_t)(h<sp/>&amp;<sp/>0x8000u))<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>floatbits(((exp<sp/>==<sp/>shifted_exp)<sp/>?<sp/>infnan_val<sp/>:<sp/>reg_val)<sp/>|<sp/>sign_bit);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>faiss</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="faiss/utils/fp16-inl.h"/>
  </compounddef>
</doxygen>
