<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classfaiss_1_1WorkerThread" kind="class" language="C++" prot="public">
    <compoundname>faiss::WorkerThread</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfaiss_1_1WorkerThread_1a82689a11d49bb1a4d98850543b462087" prot="private" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread faiss::WorkerThread::thread_</definition>
        <argsstring></argsstring>
        <name>thread_</name>
        <qualifiedname>faiss::WorkerThread::thread_</qualifiedname>
        <briefdescription>
<para>Thread that all queued lambdas are run on. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="46" column="17" bodyfile="faiss/utils/WorkerThread.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1WorkerThread_1ada0210696e69a082e226305052928f30" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex faiss::WorkerThread::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>faiss::WorkerThread::mutex_</qualifiedname>
        <briefdescription>
<para>Mutex for the queue and exit status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="49" column="16" bodyfile="faiss/utils/WorkerThread.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1WorkerThread_1a1ac0f05c57f14389d12ec34d3cd7cd65" prot="private" static="no" mutable="no">
        <type>std::condition_variable</type>
        <definition>std::condition_variable faiss::WorkerThread::monitor_</definition>
        <argsstring></argsstring>
        <name>monitor_</name>
        <qualifiedname>faiss::WorkerThread::monitor_</qualifiedname>
        <briefdescription>
<para>Monitor for the exit status and the queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="52" column="29" bodyfile="faiss/utils/WorkerThread.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1WorkerThread_1a4f9eb3eabaf5f4adf6612180060ed65e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::WorkerThread::wantStop_</definition>
        <argsstring></argsstring>
        <name>wantStop_</name>
        <qualifiedname>faiss::WorkerThread::wantStop_</qualifiedname>
        <briefdescription>
<para>Whether or not we want the thread to exit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="55" column="10" bodyfile="faiss/utils/WorkerThread.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1WorkerThread_1ac334da22a126dcd565b835c93ea8193f" prot="private" static="no" mutable="no">
        <type>std::deque&lt; std::pair&lt; std::function&lt; void()&gt;, std::promise&lt; bool &gt; &gt; &gt;</type>
        <definition>std::deque&lt;std::pair&lt;std::function&lt;void()&gt;, std::promise&lt;bool&gt; &gt; &gt; faiss::WorkerThread::queue_</definition>
        <argsstring></argsstring>
        <name>queue_</name>
        <qualifiedname>faiss::WorkerThread::queue_</qualifiedname>
        <briefdescription>
<para>Queue of pending lambdas to call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="58" column="16" bodyfile="faiss/utils/WorkerThread.h" bodystart="58" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classfaiss_1_1WorkerThread_1aa9b8104ac86a2221e836db4457fea2a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::WorkerThread::WorkerThread</definition>
        <argsstring>()</argsstring>
        <name>WorkerThread</name>
        <qualifiedname>faiss::WorkerThread::WorkerThread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="20" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1WorkerThread_1abe8c60d6c08a7287013d82c7b77bc8b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::WorkerThread::~WorkerThread</definition>
        <argsstring>()</argsstring>
        <name>~WorkerThread</name>
        <qualifiedname>faiss::WorkerThread::~WorkerThread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stops and waits for the worker thread to exit, flushing all pending lambdas </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1WorkerThread_1a5230264fa557f6d77c5fed5601a8c857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::WorkerThread::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <qualifiedname>faiss::WorkerThread::stop</qualifiedname>
        <briefdescription>
<para>Request that the worker thread stop itself. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="27" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1WorkerThread_1a29c8cfced812372adb93440545c05edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::WorkerThread::waitForThreadExit</definition>
        <argsstring>()</argsstring>
        <name>waitForThreadExit</name>
        <qualifiedname>faiss::WorkerThread::waitForThreadExit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Blocking waits in the current thread for the worker thread to stop </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="31" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1WorkerThread_1a484b472c878bb35e4fed5f5ec6733d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::future&lt; bool &gt;</type>
        <definition>std::future&lt; bool &gt; faiss::WorkerThread::add</definition>
        <argsstring>(std::function&lt; void()&gt; f)</argsstring>
        <name>add</name>
        <qualifiedname>faiss::WorkerThread::add</qualifiedname>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a lambda to run on the worker thread; returns a future that can be used to block on its completion. Future status is <computeroutput>true</computeroutput> if the lambda was run in the worker thread; <computeroutput>false</computeroutput> if it was not run, because the worker thread is exiting or has exited. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="38" column="17"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classfaiss_1_1WorkerThread_1ac572863d6d90142a28176ab8508a5c0c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::WorkerThread::startThread</definition>
        <argsstring>()</argsstring>
        <name>startThread</name>
        <qualifiedname>faiss::WorkerThread::startThread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="41" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1WorkerThread_1a3bcba1e74bc0106710834cebba8109a9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::WorkerThread::threadMain</definition>
        <argsstring>()</argsstring>
        <name>threadMain</name>
        <qualifiedname>faiss::WorkerThread::threadMain</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="42" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1WorkerThread_1a1995b2a276e75326778af7e108d5a696" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::WorkerThread::threadLoop</definition>
        <argsstring>()</argsstring>
        <name>threadLoop</name>
        <qualifiedname>faiss::WorkerThread::threadLoop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/WorkerThread.h" line="43" column="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="faiss/utils/WorkerThread.h" line="18" column="1" bodyfile="faiss/utils/WorkerThread.h" bodystart="18" bodyend="59"/>
    <listofallmembers>
      <member refid="classfaiss_1_1WorkerThread_1a484b472c878bb35e4fed5f5ec6733d79" prot="public" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>add</name></member>
      <member refid="classfaiss_1_1WorkerThread_1a1ac0f05c57f14389d12ec34d3cd7cd65" prot="private" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>monitor_</name></member>
      <member refid="classfaiss_1_1WorkerThread_1ada0210696e69a082e226305052928f30" prot="private" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>mutex_</name></member>
      <member refid="classfaiss_1_1WorkerThread_1ac334da22a126dcd565b835c93ea8193f" prot="private" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>queue_</name></member>
      <member refid="classfaiss_1_1WorkerThread_1ac572863d6d90142a28176ab8508a5c0c" prot="private" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>startThread</name></member>
      <member refid="classfaiss_1_1WorkerThread_1a5230264fa557f6d77c5fed5601a8c857" prot="public" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>stop</name></member>
      <member refid="classfaiss_1_1WorkerThread_1a82689a11d49bb1a4d98850543b462087" prot="private" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>thread_</name></member>
      <member refid="classfaiss_1_1WorkerThread_1a1995b2a276e75326778af7e108d5a696" prot="private" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>threadLoop</name></member>
      <member refid="classfaiss_1_1WorkerThread_1a3bcba1e74bc0106710834cebba8109a9" prot="private" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>threadMain</name></member>
      <member refid="classfaiss_1_1WorkerThread_1a29c8cfced812372adb93440545c05edc" prot="public" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>waitForThreadExit</name></member>
      <member refid="classfaiss_1_1WorkerThread_1a4f9eb3eabaf5f4adf6612180060ed65e" prot="private" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>wantStop_</name></member>
      <member refid="classfaiss_1_1WorkerThread_1aa9b8104ac86a2221e836db4457fea2a3" prot="public" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>WorkerThread</name></member>
      <member refid="classfaiss_1_1WorkerThread_1abe8c60d6c08a7287013d82c7b77bc8b1" prot="public" virt="non-virtual"><scope>faiss::WorkerThread</scope><name>~WorkerThread</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
