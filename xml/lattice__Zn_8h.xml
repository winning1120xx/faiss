<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="lattice__Zn_8h" kind="file" language="C++">
    <compoundname>lattice_Zn.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">vector</includes>
    <includedby refid="IndexLattice_8h" local="no">faiss/IndexLattice.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>faiss/impl/lattice_Zn.h</label>
        <link refid="lattice__Zn_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>faiss/IndexLattice.h</label>
        <link refid="IndexLattice_8h_source"/>
      </node>
      <node id="1">
        <label>faiss/impl/lattice_Zn.h</label>
        <link refid="lattice__Zn_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structfaiss_1_1ZnSphereSearch" prot="public">faiss::ZnSphereSearch</innerclass>
    <innerclass refid="structfaiss_1_1EnumeratedVectors" prot="public">faiss::EnumeratedVectors</innerclass>
    <innerclass refid="structfaiss_1_1Repeat" prot="public">faiss::Repeat</innerclass>
    <innerclass refid="structfaiss_1_1Repeats" prot="public">faiss::Repeats</innerclass>
    <innerclass refid="structfaiss_1_1ZnSphereCodec" prot="public">faiss::ZnSphereCodec</innerclass>
    <innerclass refid="structfaiss_1_1ZnSphereCodec_1_1CodeSegment" prot="public">faiss::ZnSphereCodec::CodeSegment</innerclass>
    <innerclass refid="structfaiss_1_1ZnSphereCodecRec" prot="public">faiss::ZnSphereCodecRec</innerclass>
    <innerclass refid="structfaiss_1_1ZnSphereCodecAlt" prot="public">faiss::ZnSphereCodecAlt</innerclass>
    <innernamespace refid="namespacefaiss">faiss</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Meta<sp/>Platforms,<sp/>Inc.<sp/>and<sp/>affiliates.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-*-<sp/>c++<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FAISS_LATTICE_ZN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAISS_LATTICE_ZN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefaiss" kindref="compound">faiss</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>nearest<sp/>vertex<sp/>in<sp/>the<sp/>sphere<sp/>to<sp/>a<sp/>query.<sp/>Returns<sp/>only</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>the<sp/>coordinates,<sp/>not<sp/>an<sp/>id.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Algorithm:<sp/>all<sp/>points<sp/>are<sp/>derived<sp/>from<sp/>a<sp/>one<sp/>atom<sp/>vector<sp/>up<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>permutation<sp/>and<sp/>sign<sp/>changes.<sp/>The<sp/>search<sp/>function<sp/>finds<sp/>the<sp/>most</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>appropriate<sp/>atom<sp/>and<sp/>transformation.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="structfaiss_1_1ZnSphereSearch" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1ZnSphereSearch" kindref="compound">ZnSphereSearch</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimS,<sp/>r2;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>natom;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>size<sp/>dim<sp/>*<sp/>ntatom</highlight></codeline>
<codeline lineno="30" refid="structfaiss_1_1ZnSphereSearch_1a77143a72b6a5048df0fa79b7134740d8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="structfaiss_1_1ZnSphereSearch_1a77143a72b6a5048df0fa79b7134740d8" kindref="member">voc</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ZnSphereSearch" kindref="compound">ZnSphereSearch</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r2);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>find<sp/>nearest<sp/>centroid.<sp/>x<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>normalized</highlight></codeline>
<codeline lineno="35" refid="structfaiss_1_1ZnSphereSearch_1adc8a713b54cc6be8c348c6e4545479d8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ZnSphereSearch_1adc8a713b54cc6be8c348c6e4545479d8" kindref="member">search</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>full<sp/>call.<sp/>Requires<sp/>externally-allocated<sp/>temp<sp/>space</highlight></codeline>
<codeline lineno="38" refid="structfaiss_1_1ZnSphereSearch_1a019c9b09e349e779330eb8c4690619c2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ZnSphereSearch_1a019c9b09e349e779330eb8c4690619c2" kindref="member">search</ref>(</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>tmp,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>2<sp/>*dim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>tmp_int,<sp/></highlight><highlight class="comment">//<sp/>size<sp/>dim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ibest_out<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multi-threaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>search_multi(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c_out,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dp_out);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>Support<sp/>ids<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Limitations:<sp/>ids<sp/>are<sp/>limited<sp/>to<sp/>64<sp/>bit</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structfaiss_1_1EnumeratedVectors" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1EnumeratedVectors" kindref="compound">EnumeratedVectors</ref><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>size<sp/>of<sp/>the<sp/>collection</highlight></codeline>
<codeline lineno="57" refid="structfaiss_1_1EnumeratedVectors_1ad6da4ac4aeb407f84c2471a38a876878" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structfaiss_1_1EnumeratedVectors_1ad6da4ac4aeb407f84c2471a38a876878" kindref="member">nv</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1EnumeratedVectors" kindref="compound">EnumeratedVectors</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)<sp/>:<sp/><ref refid="structfaiss_1_1EnumeratedVectors_1ad6da4ac4aeb407f84c2471a38a876878" kindref="member">nv</ref>(0),<sp/>dim(dim)<sp/>{}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>encode<sp/>a<sp/>vector<sp/>from<sp/>a<sp/>collection</highlight></codeline>
<codeline lineno="63" refid="structfaiss_1_1EnumeratedVectors_1a2ed0bdef51f569a62da6ca194143c2e5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="structfaiss_1_1EnumeratedVectors_1a2ed0bdef51f569a62da6ca194143c2e5" kindref="member">encode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>decode<sp/>it</highlight></codeline>
<codeline lineno="66" refid="structfaiss_1_1EnumeratedVectors_1af11d64142e0f8ef62599077bdd6b7f88" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1EnumeratedVectors_1af11d64142e0f8ef62599077bdd6b7f88" kindref="member">decode</ref>(uint64_t<sp/>code,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>encode<sp/>on<sp/>nc<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>encode_multi(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c,<sp/>uint64_t*<sp/>codes)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>decode<sp/>on<sp/>nc<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>decode_multi(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>codes,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>nearest<sp/>neighbor<sp/>of<sp/>each<sp/>xq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(decodes<sp/>and<sp/>computes<sp/>distances)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>find_nn(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>codes,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nq,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xq,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t*<sp/>idx,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dis);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1EnumeratedVectors" kindref="compound">~EnumeratedVectors</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structfaiss_1_1Repeat" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1Repeat" kindref="compound">Repeat</ref><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**<sp/>Repeats:<sp/>used<sp/>to<sp/>encode<sp/>a<sp/>vector<sp/>that<sp/>has<sp/>n<sp/>occurrences<sp/>of</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>val.<sp/>Encodes<sp/>the<sp/>signs<sp/>and<sp/>permutation<sp/>of<sp/>the<sp/>vector.<sp/>Useful<sp/>for</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>atoms.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="structfaiss_1_1Repeats" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1Repeats" kindref="compound">Repeats</ref><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Repeat&gt;<sp/>repeats;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>from<sp/>a<sp/>template<sp/>of<sp/>the<sp/>atom.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1Repeats" kindref="compound">Repeats</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>number<sp/>of<sp/>possible<sp/>codes<sp/>for<sp/>this<sp/>atom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>encode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>decode(uint64_t<sp/>code,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment">/**<sp/>codec<sp/>that<sp/>can<sp/>return<sp/>ids<sp/>for<sp/>the<sp/>encoded<sp/>vectors</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>uses<sp/>the<sp/>ZnSphereSearch<sp/>to<sp/>encode<sp/>the<sp/>vector<sp/>by<sp/>encoding<sp/>the</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>permutation<sp/>and<sp/>signs.<sp/>Depends<sp/>on<sp/>ZnSphereSearch<sp/>because<sp/>it<sp/>uses</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>the<sp/>atom<sp/>numbers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="structfaiss_1_1ZnSphereCodec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1ZnSphereCodec" kindref="compound">ZnSphereCodec</ref><sp/>:<sp/><ref refid="structfaiss_1_1ZnSphereSearch" kindref="compound">ZnSphereSearch</ref>,<sp/><ref refid="structfaiss_1_1EnumeratedVectors" kindref="compound">EnumeratedVectors</ref><sp/>{</highlight></codeline>
<codeline lineno="117" refid="structfaiss_1_1ZnSphereCodec_1_1CodeSegment" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1ZnSphereCodec_1_1CodeSegment" kindref="compound">CodeSegment</ref><sp/>:<sp/><ref refid="structfaiss_1_1Repeats" kindref="compound">Repeats</ref><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ZnSphereCodec_1_1CodeSegment" kindref="compound">CodeSegment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1Repeats" kindref="compound">Repeats</ref>&amp;<sp/>r)<sp/>:<sp/><ref refid="structfaiss_1_1Repeats" kindref="compound">Repeats</ref>(r)<sp/>{}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>c0;<sp/></highlight><highlight class="comment">//<sp/>first<sp/>code<sp/>assigned<sp/>to<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signbits;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;CodeSegment&gt;<sp/>code_segments;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>nv;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>code_size;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ZnSphereCodec" kindref="compound">ZnSphereCodec</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r2);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>search_and_encode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="structfaiss_1_1ZnSphereCodec_1abba759b93931fb0a38eb5af37bb3fe05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ZnSphereCodec_1abba759b93931fb0a38eb5af37bb3fe05" kindref="member">decode</ref>(uint64_t<sp/>code,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>takes<sp/>vectors<sp/>that<sp/>do<sp/>not<sp/>need<sp/>to<sp/>be<sp/>centroids</highlight></codeline>
<codeline lineno="134" refid="structfaiss_1_1ZnSphereCodec_1a323fcba5a65c35ea8dc7d2bda5d92f74" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structfaiss_1_1ZnSphereCodec_1a323fcba5a65c35ea8dc7d2bda5d92f74" kindref="member">encode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">};</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment">/**<sp/>recursive<sp/>sphere<sp/>codec</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>Uses<sp/>a<sp/>recursive<sp/>decomposition<sp/>on<sp/>the<sp/>dimensions<sp/>to<sp/>encode</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>centroids<sp/>found<sp/>by<sp/>the<sp/>ZnSphereSearch.<sp/>The<sp/>codes<sp/>are<sp/>*not*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>compatible<sp/>with<sp/>the<sp/>ones<sp/>of<sp/>ZnSpehreCodec</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="structfaiss_1_1ZnSphereCodecRec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1ZnSphereCodecRec" kindref="compound">ZnSphereCodecRec</ref><sp/>:<sp/><ref refid="structfaiss_1_1EnumeratedVectors" kindref="compound">EnumeratedVectors</ref><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r2;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2_dim;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_size;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ZnSphereCodecRec" kindref="compound">ZnSphereCodecRec</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r2);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>encode_centroid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="structfaiss_1_1ZnSphereCodecRec_1af2ebdaff73ca68e6f26dd72f3f80373d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ZnSphereCodecRec_1af2ebdaff73ca68e6f26dd72f3f80373d" kindref="member">decode</ref>(uint64_t<sp/>code,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>vectors<sp/>need<sp/>to<sp/>be<sp/>centroids<sp/>(does<sp/>not<sp/>work<sp/>on<sp/>arbitrary</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>vectors)</highlight></codeline>
<codeline lineno="157" refid="structfaiss_1_1ZnSphereCodecRec_1a271ab5ec4c8447b634d93f6c03a3a07b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structfaiss_1_1ZnSphereCodecRec_1a271ab5ec4c8447b634d93f6c03a3a07b" kindref="member">encode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>all_nv;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>all_nv_cum;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decode_cache_ld;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;float&gt;&gt;<sp/>decode_cache;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nb<sp/>of<sp/>vectors<sp/>in<sp/>the<sp/>sphere<sp/>in<sp/>dim<sp/>2^ld<sp/>with<sp/>r2<sp/>radius</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>get_nv(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ld,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r2a)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cumulative<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>get_nv_cum(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ld,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r2t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r2a)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_nv_cum(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ld,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r2t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r2a,<sp/>uint64_t<sp/>v);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="173"><highlight class="comment">/**<sp/>Codec<sp/>that<sp/>uses<sp/>the<sp/>recursive<sp/>codec<sp/>if<sp/>dim<sp/>is<sp/>a<sp/>power<sp/>of<sp/>2<sp/>and</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>the<sp/>regular<sp/>one<sp/>otherwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="structfaiss_1_1ZnSphereCodecAlt" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1ZnSphereCodecAlt" kindref="compound">ZnSphereCodecAlt</ref><sp/>:<sp/><ref refid="structfaiss_1_1ZnSphereCodec" kindref="compound">ZnSphereCodec</ref><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_rec;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ZnSphereCodecRec" kindref="compound">ZnSphereCodecRec</ref><sp/>znc_rec;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ZnSphereCodecAlt" kindref="compound">ZnSphereCodecAlt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r2);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="structfaiss_1_1ZnSphereCodecAlt_1a229ea0dbfac8fd92d52ff8074b69573b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structfaiss_1_1ZnSphereCodecAlt_1a229ea0dbfac8fd92d52ff8074b69573b" kindref="member">encode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="structfaiss_1_1ZnSphereCodecAlt_1adfc4b82213e0d4d5b45396f19f07adcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ZnSphereCodecAlt_1adfc4b82213e0d4d5b45396f19f07adcf" kindref="member">decode</ref>(uint64_t<sp/>code,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>c)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>faiss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="faiss/impl/lattice_Zn.h"/>
  </compounddef>
</doxygen>
