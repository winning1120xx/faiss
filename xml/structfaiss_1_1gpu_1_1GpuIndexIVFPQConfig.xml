<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig" kind="struct" language="C++" prot="public">
    <compoundname>faiss::gpu::GpuIndexIVFPQConfig</compoundname>
    <basecompoundref refid="structfaiss_1_1gpu_1_1GpuIndexIVFConfig" prot="public" virt="non-virtual">faiss::gpu::GpuIndexIVFConfig</basecompoundref>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig_1a9dbbec78d77d90b7b150f543e477cc49" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::gpu::GpuIndexIVFPQConfig::useFloat16LookupTables</definition>
        <argsstring></argsstring>
        <name>useFloat16LookupTables</name>
        <qualifiedname>faiss::gpu::GpuIndexIVFPQConfig::useFloat16LookupTables</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether or not float16 residual distance tables are used in the list scanning kernels. When subQuantizers * 2^bitsPerCode &gt; 16384, this is required. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexIVFPQ.h" line="29" column="10" bodyfile="faiss/gpu/GpuIndexIVFPQ.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig_1ae5b5c7acc06743e5bcca197bc33c30ec" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::gpu::GpuIndexIVFPQConfig::usePrecomputedTables</definition>
        <argsstring></argsstring>
        <name>usePrecomputedTables</name>
        <qualifiedname>faiss::gpu::GpuIndexIVFPQConfig::usePrecomputedTables</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether or not we enable the precomputed table option for search, which can substantially increase the memory requirement. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexIVFPQ.h" line="33" column="10" bodyfile="faiss/gpu/GpuIndexIVFPQ.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig_1a3698bd46d5a0003ec43d434a58794532" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::gpu::GpuIndexIVFPQConfig::interleavedLayout</definition>
        <argsstring></argsstring>
        <name>interleavedLayout</name>
        <qualifiedname>faiss::gpu::GpuIndexIVFPQConfig::interleavedLayout</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use the alternative memory layout for the IVF lists WARNING: this is a feature under development, and is only supported with cuVS enabled for the index. Do not use if cuVS is not enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexIVFPQ.h" line="38" column="10" bodyfile="faiss/gpu/GpuIndexIVFPQ.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig_1a45b88d1deb299970d887a4aa3ec8dd2a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::gpu::GpuIndexIVFPQConfig::useMMCodeDistance</definition>
        <argsstring></argsstring>
        <name>useMMCodeDistance</name>
        <qualifiedname>faiss::gpu::GpuIndexIVFPQConfig::useMMCodeDistance</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use GEMM-backed computation of PQ code distances for the no precomputed table version of IVFPQ. This is for debugging purposes, it should not substantially affect the results one way for another.</para>
<para>Note that MM code distance is enabled automatically if one uses a number of dimensions per sub-quantizer that is not natively specialized (an odd number like 7 or so). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexIVFPQ.h" line="48" column="10" bodyfile="faiss/gpu/GpuIndexIVFPQ.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1gpu_1_1GpuIndexIVFConfig_1af432221761d48e4753f501208a60264d" prot="public" static="no" mutable="no">
        <type>IndicesOptions</type>
        <definition>IndicesOptions faiss::gpu::GpuIndexIVFConfig::indicesOptions</definition>
        <argsstring></argsstring>
        <name>indicesOptions</name>
        <qualifiedname>faiss::gpu::GpuIndexIVFConfig::indicesOptions</qualifiedname>
        <initializer>= INDICES_64_BIT</initializer>
        <briefdescription>
<para><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> storage options for the GPU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexIVF.h" line="25" column="20" bodyfile="faiss/gpu/GpuIndexIVF.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1gpu_1_1GpuIndexIVFConfig_1a6d357a9a67a2fed9c8e7b139712d30f6" prot="public" static="no" mutable="no">
        <type><ref refid="structfaiss_1_1gpu_1_1GpuIndexFlatConfig" kindref="compound">GpuIndexFlatConfig</ref></type>
        <definition>GpuIndexFlatConfig faiss::gpu::GpuIndexIVFConfig::flatConfig</definition>
        <argsstring></argsstring>
        <name>flatConfig</name>
        <qualifiedname>faiss::gpu::GpuIndexIVFConfig::flatConfig</qualifiedname>
        <briefdescription>
<para>Configuration for the coarse quantizer object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexIVF.h" line="28" column="24" bodyfile="faiss/gpu/GpuIndexIVF.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1gpu_1_1GpuIndexIVFConfig_1a9ad7e2e02e0577e31968c539e499fe00" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::gpu::GpuIndexIVFConfig::allowCpuCoarseQuantizer</definition>
        <argsstring></argsstring>
        <name>allowCpuCoarseQuantizer</name>
        <qualifiedname>faiss::gpu::GpuIndexIVFConfig::allowCpuCoarseQuantizer</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This flag controls the CPU fallback logic for coarse quantizer component of the index. When set to false (default), the cloner will throw an exception for indices not implemented on GPU. When set to true, it will fallback to a CPU implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexIVF.h" line="34" column="10" bodyfile="faiss/gpu/GpuIndexIVF.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1gpu_1_1GpuIndexConfig_1aab05a0aa7b42feae7df4e556a52ead57" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::gpu::GpuIndexConfig::device</definition>
        <argsstring></argsstring>
        <name>device</name>
        <qualifiedname>faiss::gpu::GpuIndexConfig::device</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>GPU device on which the index is resident. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndex.h" line="34" column="9" bodyfile="faiss/gpu/GpuIndex.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1gpu_1_1GpuIndexConfig_1adf7c9461009108a9a433a077ab322d2e" prot="public" static="no" mutable="no">
        <type>MemorySpace</type>
        <definition>MemorySpace faiss::gpu::GpuIndexConfig::memorySpace</definition>
        <argsstring></argsstring>
        <name>memorySpace</name>
        <qualifiedname>faiss::gpu::GpuIndexConfig::memorySpace</qualifiedname>
        <initializer>= MemorySpace::Device</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>What memory space to use for primary storage. On Pascal and above (CC 6+) architectures, allows GPUs to use more memory than is available on the GPU. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndex.h" line="39" column="17" bodyfile="faiss/gpu/GpuIndex.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1gpu_1_1GpuIndexConfig_1ad0c59b7ef7ac3c1055da1addffb9dbb1" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::gpu::GpuIndexConfig::use_cuvs</definition>
        <argsstring></argsstring>
        <name>use_cuvs</name>
        <qualifiedname>faiss::gpu::GpuIndexConfig::use_cuvs</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Should the index dispatch down to cuVS? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndex.h" line="45" column="10" bodyfile="faiss/gpu/GpuIndex.h" bodystart="45" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>faiss::gpu::GpuIndexConfig</label>
        <link refid="structfaiss_1_1gpu_1_1GpuIndexConfig"/>
      </node>
      <node id="2">
        <label>faiss::gpu::GpuIndexIVFConfig</label>
        <link refid="structfaiss_1_1gpu_1_1GpuIndexIVFConfig"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>faiss::gpu::GpuIndexIVFPQConfig</label>
        <link refid="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>faiss::gpu::GpuIndexConfig</label>
        <link refid="structfaiss_1_1gpu_1_1GpuIndexConfig"/>
      </node>
      <node id="4">
        <label>faiss::gpu::GpuIndexFlatConfig</label>
        <link refid="structfaiss_1_1gpu_1_1GpuIndexFlatConfig"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>faiss::gpu::GpuIndexIVFConfig</label>
        <link refid="structfaiss_1_1gpu_1_1GpuIndexIVFConfig"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>flatConfig</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>faiss::gpu::GpuIndexIVFPQConfig</label>
        <link refid="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="faiss/gpu/GpuIndexIVFPQ.h" line="25" column="1" bodyfile="faiss/gpu/GpuIndexIVFPQ.h" bodystart="25" bodyend="49"/>
    <listofallmembers>
      <member refid="structfaiss_1_1gpu_1_1GpuIndexIVFConfig_1a9ad7e2e02e0577e31968c539e499fe00" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexIVFPQConfig</scope><name>allowCpuCoarseQuantizer</name></member>
      <member refid="structfaiss_1_1gpu_1_1GpuIndexConfig_1aab05a0aa7b42feae7df4e556a52ead57" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexIVFPQConfig</scope><name>device</name></member>
      <member refid="structfaiss_1_1gpu_1_1GpuIndexIVFConfig_1a6d357a9a67a2fed9c8e7b139712d30f6" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexIVFPQConfig</scope><name>flatConfig</name></member>
      <member refid="structfaiss_1_1gpu_1_1GpuIndexIVFConfig_1af432221761d48e4753f501208a60264d" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexIVFPQConfig</scope><name>indicesOptions</name></member>
      <member refid="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig_1a3698bd46d5a0003ec43d434a58794532" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexIVFPQConfig</scope><name>interleavedLayout</name></member>
      <member refid="structfaiss_1_1gpu_1_1GpuIndexConfig_1adf7c9461009108a9a433a077ab322d2e" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexIVFPQConfig</scope><name>memorySpace</name></member>
      <member refid="structfaiss_1_1gpu_1_1GpuIndexConfig_1ad0c59b7ef7ac3c1055da1addffb9dbb1" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexIVFPQConfig</scope><name>use_cuvs</name></member>
      <member refid="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig_1a9dbbec78d77d90b7b150f543e477cc49" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexIVFPQConfig</scope><name>useFloat16LookupTables</name></member>
      <member refid="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig_1a45b88d1deb299970d887a4aa3ec8dd2a" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexIVFPQConfig</scope><name>useMMCodeDistance</name></member>
      <member refid="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig_1ae5b5c7acc06743e5bcca197bc33c30ec" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexIVFPQConfig</scope><name>usePrecomputedTables</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
