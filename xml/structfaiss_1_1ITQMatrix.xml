<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structfaiss_1_1ITQMatrix" kind="struct" language="C++" prot="public">
    <compoundname>faiss::ITQMatrix</compoundname>
    <basecompoundref refid="structfaiss_1_1LinearTransform" prot="public" virt="non-virtual">faiss::LinearTransform</basecompoundref>
    <includes refid="VectorTransform_8h" local="no">VectorTransform.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfaiss_1_1ITQMatrix_1a31407547017869e82b462f462d29dac7" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::ITQMatrix::max_iter</definition>
        <argsstring></argsstring>
        <name>max_iter</name>
        <qualifiedname>faiss::ITQMatrix::max_iter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="189" column="9" bodyfile="faiss/VectorTransform.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ITQMatrix_1aad8bf31090ef0414326e42286f164a3a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::ITQMatrix::seed</definition>
        <argsstring></argsstring>
        <name>seed</name>
        <qualifiedname>faiss::ITQMatrix::seed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="190" column="9" bodyfile="faiss/VectorTransform.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ITQMatrix_1a2460c1d755c391cb02a41be8328a97d4" prot="public" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; faiss::ITQMatrix::init_rotation</definition>
        <argsstring></argsstring>
        <name>init_rotation</name>
        <qualifiedname>faiss::ITQMatrix::init_rotation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="193" column="17" bodyfile="faiss/VectorTransform.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1LinearTransform_1a322401ba80cb96ac1e7846401f2bef24" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::LinearTransform::have_bias</definition>
        <argsstring></argsstring>
        <name>have_bias</name>
        <qualifiedname>faiss::LinearTransform::have_bias</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="72" column="10" bodyfile="faiss/VectorTransform.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1LinearTransform_1a8a67a0178eab513cf87545f5d12d9569" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::LinearTransform::is_orthonormal</definition>
        <argsstring></argsstring>
        <name>is_orthonormal</name>
        <qualifiedname>faiss::LinearTransform::is_orthonormal</qualifiedname>
        <briefdescription>
<para>! whether to use the bias term </para>
        </briefdescription>
        <detaileddescription>
<para>check if matrix A is orthonormal (enables reverse_transform) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="75" column="10" bodyfile="faiss/VectorTransform.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1LinearTransform_1aa40e156ef57fe206cd5f3a58ec0660da" prot="public" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; faiss::LinearTransform::A</definition>
        <argsstring></argsstring>
        <name>A</name>
        <qualifiedname>faiss::LinearTransform::A</qualifiedname>
        <briefdescription>
<para>Transformation matrix, size d_out * d_in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="78" column="17" bodyfile="faiss/VectorTransform.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1LinearTransform_1ab0383f690aeb823876e9143febad1a87" prot="public" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; faiss::LinearTransform::b</definition>
        <argsstring></argsstring>
        <name>b</name>
        <qualifiedname>faiss::LinearTransform::b</qualifiedname>
        <briefdescription>
<para>bias vector, size d_out </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="81" column="17" bodyfile="faiss/VectorTransform.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1LinearTransform_1ae351ccd1155b71ac9d2fbd8d11b7082a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::LinearTransform::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <qualifiedname>faiss::LinearTransform::verbose</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="102" column="10" bodyfile="faiss/VectorTransform.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1VectorTransform_1afdf56cbd261a571cf6b8872be5bd43b6" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::VectorTransform::d_in</definition>
        <argsstring></argsstring>
        <name>d_in</name>
        <qualifiedname>faiss::VectorTransform::d_in</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="26" column="9" bodyfile="faiss/VectorTransform.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::VectorTransform::d_out</definition>
        <argsstring></argsstring>
        <name>d_out</name>
        <qualifiedname>faiss::VectorTransform::d_out</qualifiedname>
        <briefdescription>
<para>! input dimension </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="27" column="9" bodyfile="faiss/VectorTransform.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1VectorTransform_1ab511f1ddf608c00204555881ca28cb02" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::VectorTransform::is_trained</definition>
        <argsstring></argsstring>
        <name>is_trained</name>
        <qualifiedname>faiss::VectorTransform::is_trained</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set if the <ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref> does not require training, or if training is done already </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="34" column="10" bodyfile="faiss/VectorTransform.h" bodystart="34" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structfaiss_1_1ITQMatrix_1a32b1f714c2f82373aba3988e10dd1cc2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::ITQMatrix::ITQMatrix</definition>
        <argsstring>(int d=0)</argsstring>
        <name>ITQMatrix</name>
        <qualifiedname>faiss::ITQMatrix::ITQMatrix</qualifiedname>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="195" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ITQMatrix_1abac7b3a00aa622c1590ea11f01abf073" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::ITQMatrix::train</definition>
        <argsstring>(idx_t n, const float *x) override</argsstring>
        <name>train</name>
        <qualifiedname>faiss::ITQMatrix::train</qualifiedname>
        <reimplements refid="structfaiss_1_1VectorTransform_1ab781e04a6c8afe04689b3fc64be512d5">train</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform training on a representative set of vectors. Does nothing by default.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of training vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>training vecors, size n * d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="197" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1LinearTransform_1aefb0ae9416652e408a96604f18a78d7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::LinearTransform::apply_noalloc</definition>
        <argsstring>(idx_t n, const float *x, float *xt) const override</argsstring>
        <name>apply_noalloc</name>
        <qualifiedname>faiss::LinearTransform::apply_noalloc</qualifiedname>
        <reimplements refid="structfaiss_1_1VectorTransform_1a90f1a218c224c049f1bd8b77a78d6aa0">apply_noalloc</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>xt</declname>
        </param>
        <briefdescription>
<para>same as apply, but result is pre-allocated </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="90" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1LinearTransform_1a29af2cf35a13b538eb327aa64b07e474" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::LinearTransform::transform_transpose</definition>
        <argsstring>(idx_t n, const float *y, float *x) const</argsstring>
        <name>transform_transpose</name>
        <qualifiedname>faiss::LinearTransform::transform_transpose</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute x = A^T * (x - b) is reverse transform if A has orthonormal lines </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="94" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1LinearTransform_1aabcea47432734c860fdf6fcc3a998563" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::LinearTransform::reverse_transform</definition>
        <argsstring>(idx_t n, const float *xt, float *x) const override</argsstring>
        <name>reverse_transform</name>
        <qualifiedname>faiss::LinearTransform::reverse_transform</qualifiedname>
        <reimplements refid="structfaiss_1_1VectorTransform_1a0913e3b521a6d34f523c291508e82adb">reverse_transform</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xt</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>works only if is_orthonormal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="97" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1LinearTransform_1a1f75b8a58b9f452eb08fd8e54c134fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::LinearTransform::set_is_orthonormal</definition>
        <argsstring>()</argsstring>
        <name>set_is_orthonormal</name>
        <qualifiedname>faiss::LinearTransform::set_is_orthonormal</qualifiedname>
        <briefdescription>
<para>compute A^T * A to set the is_orthonormal flag </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="100" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1LinearTransform_1aeca6faf0c5beb67a66b7a22182422bc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::LinearTransform::print_if_verbose</definition>
        <argsstring>(const char *name, const std::vector&lt; double &gt; &amp;mat, int n, int d) const</argsstring>
        <name>print_if_verbose</name>
        <qualifiedname>faiss::LinearTransform::print_if_verbose</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="103" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1LinearTransform_1a3ce4b5a2f726620afa5492069924b506" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::LinearTransform::check_identical</definition>
        <argsstring>(const VectorTransform &amp;other) const override</argsstring>
        <name>check_identical</name>
        <qualifiedname>faiss::LinearTransform::check_identical</qualifiedname>
        <reimplements refid="structfaiss_1_1VectorTransform_1ab6ac3b3be9e794a5eaa6b122709b4f99">check_identical</reimplements>
        <param>
          <type>const <ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="109" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1VectorTransform_1a99fb80aeff049dc92300d2ed79d30883" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * faiss::VectorTransform::apply</definition>
        <argsstring>(idx_t n, const float *x) const</argsstring>
        <name>apply</name>
        <qualifiedname>faiss::VectorTransform::apply</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>apply the transformation and return the result in an allocated pointer <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors to transform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors, size n * d_in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>output vectors, size n * d_out </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/VectorTransform.h" line="49" column="11"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ITQ implementation from</para>
<para>Iterative quantization: A procrustean approach to learning binary codes for large-scale image retrieval,</para>
<para>Yunchao Gong, Svetlana Lazebnik, Albert Gordo, Florent Perronnin, PAMI&apos;12. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>faiss::ITQMatrix</label>
        <link refid="structfaiss_1_1ITQMatrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>faiss::LinearTransform</label>
        <link refid="structfaiss_1_1LinearTransform"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>faiss::VectorTransform</label>
        <link refid="structfaiss_1_1VectorTransform"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>faiss::ITQMatrix</label>
        <link refid="structfaiss_1_1ITQMatrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>faiss::LinearTransform</label>
        <link refid="structfaiss_1_1LinearTransform"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>faiss::VectorTransform</label>
        <link refid="structfaiss_1_1VectorTransform"/>
      </node>
    </collaborationgraph>
    <location file="faiss/VectorTransform.h" line="188" column="1" bodyfile="faiss/VectorTransform.h" bodystart="188" bodyend="198"/>
    <listofallmembers>
      <member refid="structfaiss_1_1LinearTransform_1aa40e156ef57fe206cd5f3a58ec0660da" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>A</name></member>
      <member refid="structfaiss_1_1VectorTransform_1a99fb80aeff049dc92300d2ed79d30883" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>apply</name></member>
      <member refid="structfaiss_1_1LinearTransform_1aefb0ae9416652e408a96604f18a78d7d" prot="public" virt="virtual"><scope>faiss::ITQMatrix</scope><name>apply_noalloc</name></member>
      <member refid="structfaiss_1_1LinearTransform_1ab0383f690aeb823876e9143febad1a87" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>b</name></member>
      <member refid="structfaiss_1_1LinearTransform_1a3ce4b5a2f726620afa5492069924b506" prot="public" virt="virtual"><scope>faiss::ITQMatrix</scope><name>check_identical</name></member>
      <member refid="structfaiss_1_1VectorTransform_1afdf56cbd261a571cf6b8872be5bd43b6" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>d_in</name></member>
      <member refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>d_out</name></member>
      <member refid="structfaiss_1_1LinearTransform_1a322401ba80cb96ac1e7846401f2bef24" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>have_bias</name></member>
      <member refid="structfaiss_1_1ITQMatrix_1a2460c1d755c391cb02a41be8328a97d4" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>init_rotation</name></member>
      <member refid="structfaiss_1_1LinearTransform_1a8a67a0178eab513cf87545f5d12d9569" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>is_orthonormal</name></member>
      <member refid="structfaiss_1_1VectorTransform_1ab511f1ddf608c00204555881ca28cb02" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>is_trained</name></member>
      <member refid="structfaiss_1_1ITQMatrix_1a32b1f714c2f82373aba3988e10dd1cc2" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>ITQMatrix</name></member>
      <member refid="structfaiss_1_1LinearTransform_1a7bf766de1abac428d18b8817208fcab0" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>LinearTransform</name></member>
      <member refid="structfaiss_1_1ITQMatrix_1a31407547017869e82b462f462d29dac7" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>max_iter</name></member>
      <member refid="structfaiss_1_1LinearTransform_1aeca6faf0c5beb67a66b7a22182422bc5" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>print_if_verbose</name></member>
      <member refid="structfaiss_1_1LinearTransform_1aabcea47432734c860fdf6fcc3a998563" prot="public" virt="virtual"><scope>faiss::ITQMatrix</scope><name>reverse_transform</name></member>
      <member refid="structfaiss_1_1ITQMatrix_1aad8bf31090ef0414326e42286f164a3a" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>seed</name></member>
      <member refid="structfaiss_1_1LinearTransform_1a1f75b8a58b9f452eb08fd8e54c134fe0" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>set_is_orthonormal</name></member>
      <member refid="structfaiss_1_1ITQMatrix_1abac7b3a00aa622c1590ea11f01abf073" prot="public" virt="virtual"><scope>faiss::ITQMatrix</scope><name>train</name></member>
      <member refid="structfaiss_1_1LinearTransform_1a29af2cf35a13b538eb327aa64b07e474" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>transform_transpose</name></member>
      <member refid="structfaiss_1_1VectorTransform_1a137f48bab695736f0b1d79a50cddc858" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>VectorTransform</name></member>
      <member refid="structfaiss_1_1LinearTransform_1ae351ccd1155b71ac9d2fbd8d11b7082a" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>verbose</name></member>
      <member refid="structfaiss_1_1LinearTransform_1a87a85f77d0b49d85f8d2d181b7835a04" prot="public" virt="non-virtual"><scope>faiss::ITQMatrix</scope><name>~LinearTransform</name></member>
      <member refid="structfaiss_1_1VectorTransform_1a6e003e61f6f88afb18e65f1493b904a8" prot="public" virt="virtual"><scope>faiss::ITQMatrix</scope><name>~VectorTransform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
