<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="IVFUtils_8cuh" kind="file" language="C++">
    <compoundname>IVFUtils.cuh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Meta<sp/>Platforms,<sp/>Inc.<sp/>and<sp/>affiliates.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#pragma<sp/>once</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;faiss/Index.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;faiss/gpu/GpuIndicesOptions.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;faiss/gpu/utils/DeviceVector.cuh&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;faiss/gpu/utils/Tensor.cuh&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>A<sp/>collection<sp/>of<sp/>utility<sp/>functions<sp/>for<sp/>IVFPQ<sp/>and<sp/>IVFFlat,<sp/>for</highlight></codeline>
<codeline><highlight class="normal">//<sp/>post-processing<sp/>and<sp/>k-selecting<sp/>the<sp/>results</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>faiss<sp/>{</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>gpu<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>GpuResources;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>For<sp/>the<sp/>final<sp/>k-selection<sp/>of<sp/>IVF<sp/>query<sp/>distances,<sp/>we<sp/>perform<sp/>two<sp/>passes.</highlight></codeline>
<codeline><highlight class="normal">///<sp/>The<sp/>first<sp/>pass<sp/>scans<sp/>some<sp/>number<sp/>of<sp/>per-IVF<sp/>list<sp/>distances<sp/>reducing<sp/>them<sp/>to</highlight></codeline>
<codeline><highlight class="normal">///<sp/>at<sp/>most<sp/>8,<sp/>then<sp/>a<sp/>second<sp/>pass<sp/>processes<sp/>these<sp/>&lt;=<sp/>8<sp/>to<sp/>the<sp/>single<sp/>final<sp/>list</highlight></codeline>
<codeline><highlight class="normal">///<sp/>of<sp/>NN<sp/>candidates</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>getIVFKSelectionPass2Chunks(size_t<sp/>nprobe);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>Function<sp/>to<sp/>determine<sp/>amount<sp/>of<sp/>temporary<sp/>space<sp/>that<sp/>we<sp/>allocate</highlight></codeline>
<codeline><highlight class="normal">///<sp/>for<sp/>storing<sp/>basic<sp/>IVF<sp/>list<sp/>scanning<sp/>distances<sp/>during<sp/>query,<sp/>based<sp/>on<sp/>the</highlight></codeline>
<codeline><highlight class="normal">///<sp/>memory<sp/>allocation<sp/>per<sp/>query.<sp/>This<sp/>is<sp/>the<sp/>memory<sp/>requirement<sp/>for</highlight></codeline>
<codeline><highlight class="normal">///<sp/>IVFFlat/IVFSQ<sp/>but<sp/>IVFPQ<sp/>will<sp/>add<sp/>some<sp/>additional<sp/>allocation<sp/>as<sp/>well<sp/>(see</highlight></codeline>
<codeline><highlight class="normal">///<sp/>getIVFPQPerQueryTempMemory)</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>getIVFPerQueryTempMemory(size_t<sp/>k,<sp/>size_t<sp/>nprobe,<sp/>size_t<sp/>maxListLength);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>Function<sp/>to<sp/>determine<sp/>amount<sp/>of<sp/>temporary<sp/>space<sp/>that<sp/>we<sp/>allocate</highlight></codeline>
<codeline><highlight class="normal">///<sp/>for<sp/>storing<sp/>basic<sp/>IVFPQ<sp/>list<sp/>scanning<sp/>distances<sp/>during<sp/>query,<sp/>based<sp/>on<sp/>the</highlight></codeline>
<codeline><highlight class="normal">///<sp/>memory<sp/>allocation<sp/>per<sp/>query.</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>getIVFPQPerQueryTempMemory(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>k,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>nprobe,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>maxListLength,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>usePrecomputedCodes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>numSubQuantizers,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>numSubQuantizerCodes);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>Based<sp/>on<sp/>the<sp/>amount<sp/>of<sp/>temporary<sp/>memory<sp/>needed<sp/>per<sp/>IVF<sp/>query<sp/>(determined<sp/>by</highlight></codeline>
<codeline><highlight class="normal">///<sp/>one<sp/>of<sp/>the<sp/>above<sp/>functions)<sp/>and<sp/>the<sp/>amount<sp/>of<sp/>current<sp/>temporary<sp/>memory</highlight></codeline>
<codeline><highlight class="normal">///<sp/>available,<sp/>determine<sp/>how<sp/>many<sp/>queries<sp/>we<sp/>will<sp/>run<sp/>concurrently<sp/>in<sp/>a<sp/>single</highlight></codeline>
<codeline><highlight class="normal">///<sp/>tile<sp/>so<sp/>as<sp/>to<sp/>stay<sp/>within<sp/>reasonable<sp/>temporary<sp/>memory<sp/>allocation<sp/>limits.</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>getIVFQueryTileSize(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>numQueries,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>tempMemoryAvailable,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>sizePerQuery);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>Function<sp/>for<sp/>multi-pass<sp/>scanning<sp/>that<sp/>collects<sp/>the<sp/>length<sp/>of</highlight></codeline>
<codeline><highlight class="normal">///<sp/>intermediate<sp/>results<sp/>for<sp/>all<sp/>(query,<sp/>probe)<sp/>pair</highlight></codeline>
<codeline><highlight class="normal">void<sp/>runCalcListOffsets(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GpuResources*<sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;idx_t,<sp/>2,<sp/>true&gt;&amp;<sp/>ivfListIds,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeviceVector&lt;idx_t&gt;&amp;<sp/>listLengths,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;idx_t,<sp/>2,<sp/>true&gt;&amp;<sp/>prefixSumOffsets,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;char,<sp/>1,<sp/>true&gt;&amp;<sp/>thrustMem,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>Performs<sp/>a<sp/>first<sp/>pass<sp/>of<sp/>k-selection<sp/>on<sp/>the<sp/>results</highlight></codeline>
<codeline><highlight class="normal">void<sp/>runPass1SelectLists(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;idx_t,<sp/>2,<sp/>true&gt;&amp;<sp/>prefixSumOffsets,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;float,<sp/>1,<sp/>true&gt;&amp;<sp/>distance,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nprobe,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>k,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>use64BitSelection,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>chooseLargest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;float,<sp/>3,<sp/>true&gt;&amp;<sp/>heapDistances,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;idx_t,<sp/>3,<sp/>true&gt;&amp;<sp/>heapIndices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>Performs<sp/>a<sp/>final<sp/>pass<sp/>of<sp/>k-selection<sp/>on<sp/>the<sp/>results,<sp/>producing<sp/>the</highlight></codeline>
<codeline><highlight class="normal">///<sp/>final<sp/>indices</highlight></codeline>
<codeline><highlight class="normal">void<sp/>runPass2SelectLists(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;float,<sp/>2,<sp/>true&gt;&amp;<sp/>heapDistances,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;idx_t,<sp/>2,<sp/>true&gt;&amp;<sp/>heapIndices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeviceVector&lt;void*&gt;&amp;<sp/>listIndices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndicesOptions<sp/>indicesOptions,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;idx_t,<sp/>2,<sp/>true&gt;&amp;<sp/>prefixSumOffsets,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;idx_t,<sp/>2,<sp/>true&gt;&amp;<sp/>ivfListIds,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>k,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>use64BitSelection,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>chooseLargest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;float,<sp/>2,<sp/>true&gt;&amp;<sp/>outDistances,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tensor&lt;idx_t,<sp/>2,<sp/>true&gt;&amp;<sp/>outIndices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//<sp/>namespace<sp/>gpu</highlight></codeline>
<codeline><highlight class="normal">}<sp/>//<sp/>namespace<sp/>faiss</highlight></codeline>
    </programlisting>
    <location file="faiss/gpu/impl/IVFUtils.cuh"/>
  </compounddef>
</doxygen>
