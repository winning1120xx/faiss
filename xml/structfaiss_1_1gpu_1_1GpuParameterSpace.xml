<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structfaiss_1_1gpu_1_1GpuParameterSpace" kind="struct" language="C++" prot="public">
    <compoundname>faiss::gpu::GpuParameterSpace</compoundname>
    <basecompoundref refid="structfaiss_1_1ParameterSpace" prot="public" virt="non-virtual">faiss::ParameterSpace</basecompoundref>
    <includes refid="GpuAutoTune_8h" local="no">GpuAutoTune.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structfaiss_1_1gpu_1_1GpuParameterSpace_1ab2bf33a6f1579c3d42f656ded1df3398" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuParameterSpace::initialize</definition>
        <argsstring>(const faiss::Index *index) override</argsstring>
        <name>initialize</name>
        <qualifiedname>faiss::gpu::GpuParameterSpace::initialize</qualifiedname>
        <reimplements refid="structfaiss_1_1ParameterSpace_1a3e2e52e7b04f838473e01d018afde832">initialize</reimplements>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>initialize with reasonable parameters for the index </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuAutoTune.h" line="19" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1gpu_1_1GpuParameterSpace_1a1820826bb47a51ec9f000118be9c83b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuParameterSpace::set_index_parameter</definition>
        <argsstring>(faiss::Index *index, const std::string &amp;name, double val) const override</argsstring>
        <name>set_index_parameter</name>
        <qualifiedname>faiss::gpu::GpuParameterSpace::set_index_parameter</qualifiedname>
        <reimplements refid="structfaiss_1_1ParameterSpace_1ad9e630ff62561acf6a55b972ee7bb309">set_index_parameter</reimplements>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>set a combination of parameters on an index </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuAutoTune.h" line="22" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ParameterSpace_1a255b1e3bf93f8b0cbbe16eae66478acc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::ParameterSpace::n_combinations</definition>
        <argsstring>() const</argsstring>
        <name>n_combinations</name>
        <qualifiedname>faiss::ParameterSpace::n_combinations</qualifiedname>
        <briefdescription>
<para>nb of combinations, = product of values sizes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="157" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ParameterSpace_1ab311c622327c18b42aa66e2b9bcd5a7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::ParameterSpace::combination_ge</definition>
        <argsstring>(size_t c1, size_t c2) const</argsstring>
        <name>combination_ge</name>
        <qualifiedname>faiss::ParameterSpace::combination_ge</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>returns whether combinations c1 &gt;= c2 in the tuple sense </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="160" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ParameterSpace_1af5081b3739982c6be702e46df666fec4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string faiss::ParameterSpace::combination_name</definition>
        <argsstring>(size_t cno) const</argsstring>
        <name>combination_name</name>
        <qualifiedname>faiss::ParameterSpace::combination_name</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>cno</declname>
        </param>
        <briefdescription>
<para>get string representation of the combination </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="163" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ParameterSpace_1a066ae6501cf7b31b1b5bb1e34bb8d0dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ParameterSpace::display</definition>
        <argsstring>() const</argsstring>
        <name>display</name>
        <qualifiedname>faiss::ParameterSpace::display</qualifiedname>
        <briefdescription>
<para>print a description on stdout </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="166" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ParameterSpace_1a6fa126b026197762f34ce097833c6f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1ParameterRange" kindref="compound">ParameterRange</ref> &amp;</type>
        <definition>ParameterRange &amp; faiss::ParameterSpace::add_range</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>add_range</name>
        <qualifiedname>faiss::ParameterSpace::add_range</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>add a new parameter (or return it if it exists) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="169" column="20"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ParameterSpace_1a613036d9ce9b2d89856043782975a30a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ParameterSpace::set_index_parameters</definition>
        <argsstring>(Index *index, size_t cno) const</argsstring>
        <name>set_index_parameters</name>
        <qualifiedname>faiss::ParameterSpace::set_index_parameters</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cno</declname>
        </param>
        <briefdescription>
<para>set a combination of parameters on an index </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="175" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ParameterSpace_1acaf902b57394d802a32dcbdfa6bcd7b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ParameterSpace::set_index_parameters</definition>
        <argsstring>(Index *index, const char *param_string) const</argsstring>
        <name>set_index_parameters</name>
        <qualifiedname>faiss::ParameterSpace::set_index_parameters</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>param_string</declname>
        </param>
        <briefdescription>
<para>set a combination of parameters described by a string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="178" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ParameterSpace_1a8b8ca45f0a520a7100b4ad9c7be1e079" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ParameterSpace::update_bounds</definition>
        <argsstring>(size_t cno, const OperatingPoint &amp;op, double *upper_bound_perf, double *lower_bound_t) const</argsstring>
        <name>update_bounds</name>
        <qualifiedname>faiss::ParameterSpace::update_bounds</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>cno</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1OperatingPoint" kindref="compound">OperatingPoint</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>upper_bound_perf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lower_bound_t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>find an upper bound on the performance and a lower bound on t for configuration cno given another operating point op </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="188" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ParameterSpace_1abf95f9ac04d0a2d1d4ac9e3b685bfcc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ParameterSpace::explore</definition>
        <argsstring>(Index *index, size_t nq, const float *xq, const AutoTuneCriterion &amp;crit, OperatingPoints *ops) const</argsstring>
        <name>explore</name>
        <qualifiedname>faiss::ParameterSpace::explore</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nq</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xq</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1AutoTuneCriterion" kindref="compound">AutoTuneCriterion</ref> &amp;</type>
          <declname>crit</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1OperatingPoints" kindref="compound">OperatingPoints</ref> *</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>explore operating points <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index to run on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xq</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors (size nq * index.d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crit</parametername>
</parameternamelist>
<parameterdescription>
<para>selection criterion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>resulting operating points </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="200" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfaiss_1_1ParameterSpace_1a334c1bb54bc2b70950a4a63950728cbb" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structfaiss_1_1ParameterRange" kindref="compound">ParameterRange</ref> &gt;</type>
        <definition>std::vector&lt;ParameterRange&gt; faiss::ParameterSpace::parameter_ranges</definition>
        <argsstring></argsstring>
        <name>parameter_ranges</name>
        <qualifiedname>faiss::ParameterSpace::parameter_ranges</qualifiedname>
        <briefdescription>
<para>all tunable parameters </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="133" column="17" bodyfile="faiss/AutoTune.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ParameterSpace_1a7a9f2292c4e0ac3aad569434edea87b0" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::ParameterSpace::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <qualifiedname>faiss::ParameterSpace::verbose</qualifiedname>
        <briefdescription>
<para>verbosity during exploration </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="138" column="9" bodyfile="faiss/AutoTune.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ParameterSpace_1a76aeae25b3269fb24a26194fbe013b86" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::ParameterSpace::n_experiments</definition>
        <argsstring></argsstring>
        <name>n_experiments</name>
        <qualifiedname>faiss::ParameterSpace::n_experiments</qualifiedname>
        <briefdescription>
<para>nb of experiments during optimization (0 = try all combinations) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="141" column="9" bodyfile="faiss/AutoTune.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ParameterSpace_1aee8fd44e15656ba80fe98de4c65ed767" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::ParameterSpace::batchsize</definition>
        <argsstring></argsstring>
        <name>batchsize</name>
        <qualifiedname>faiss::ParameterSpace::batchsize</qualifiedname>
        <briefdescription>
<para>maximum number of queries to submit at a time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="144" column="12" bodyfile="faiss/AutoTune.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ParameterSpace_1af6dc3b9c5631b509cbae99bf0f24170b" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::ParameterSpace::thread_over_batches</definition>
        <argsstring></argsstring>
        <name>thread_over_batches</name>
        <qualifiedname>faiss::ParameterSpace::thread_over_batches</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>use multithreading over batches (useful to benchmark independent single-searches) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="148" column="10" bodyfile="faiss/AutoTune.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ParameterSpace_1a50d9d784d69d9812c12dc9b2baf9351d" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double faiss::ParameterSpace::min_test_duration</definition>
        <argsstring></argsstring>
        <name>min_test_duration</name>
        <qualifiedname>faiss::ParameterSpace::min_test_duration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>run tests several times until they reach at least this duration (to avoid jittering in MT mode) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/AutoTune.h" line="152" column="12" bodyfile="faiss/AutoTune.h" bodystart="152" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>parameter space and setters for GPU indexes </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>faiss::ParameterSpace</label>
        <link refid="structfaiss_1_1ParameterSpace"/>
      </node>
      <node id="1">
        <label>faiss::gpu::GpuParameterSpace</label>
        <link refid="structfaiss_1_1gpu_1_1GpuParameterSpace"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>faiss::ParameterSpace</label>
        <link refid="structfaiss_1_1ParameterSpace"/>
      </node>
      <node id="1">
        <label>faiss::gpu::GpuParameterSpace</label>
        <link refid="structfaiss_1_1gpu_1_1GpuParameterSpace"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="faiss/gpu/GpuAutoTune.h" line="17" column="1" bodyfile="faiss/gpu/GpuAutoTune.h" bodystart="17" bodyend="26"/>
    <listofallmembers>
      <member refid="structfaiss_1_1ParameterSpace_1a6fa126b026197762f34ce097833c6f7c" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>add_range</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1aee8fd44e15656ba80fe98de4c65ed767" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>batchsize</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1ab311c622327c18b42aa66e2b9bcd5a7f" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>combination_ge</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1af5081b3739982c6be702e46df666fec4" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>combination_name</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1a066ae6501cf7b31b1b5bb1e34bb8d0dc" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>display</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1abf95f9ac04d0a2d1d4ac9e3b685bfcc3" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>explore</name></member>
      <member refid="structfaiss_1_1gpu_1_1GpuParameterSpace_1ab2bf33a6f1579c3d42f656ded1df3398" prot="public" virt="virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>initialize</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1a50d9d784d69d9812c12dc9b2baf9351d" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>min_test_duration</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1a255b1e3bf93f8b0cbbe16eae66478acc" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>n_combinations</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1a76aeae25b3269fb24a26194fbe013b86" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>n_experiments</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1a334c1bb54bc2b70950a4a63950728cbb" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>parameter_ranges</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1ad9c41b66db298ddf8c43b14d8eb88a67" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>ParameterSpace</name></member>
      <member refid="structfaiss_1_1gpu_1_1GpuParameterSpace_1a1820826bb47a51ec9f000118be9c83b2" prot="public" virt="virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>set_index_parameter</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1a613036d9ce9b2d89856043782975a30a" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>set_index_parameters</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1acaf902b57394d802a32dcbdfa6bcd7b8" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>set_index_parameters</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1af6dc3b9c5631b509cbae99bf0f24170b" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>thread_over_batches</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1a8b8ca45f0a520a7100b4ad9c7be1e079" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>update_bounds</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1a7a9f2292c4e0ac3aad569434edea87b0" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>verbose</name></member>
      <member refid="structfaiss_1_1ParameterSpace_1a75fbe38ddf6cdca0928316dae9f17764" prot="public" virt="virtual"><scope>faiss::gpu::GpuParameterSpace</scope><name>~ParameterSpace</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
